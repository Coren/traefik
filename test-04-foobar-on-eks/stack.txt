{
    "version": 3,
    "deployment": {
        "manifest": {
            "time": "2021-11-04T11:44:03.420195056+01:00",
            "magic": "8d6865ebb278e5cab43a91df65bc81dd9a7b32bf09de8967d2ccd6c668ee91a2",
            "version": "v3.16.0"
        },
        "secrets_providers": {
            "type": "service",
            "state": {
                "url": "https://api.pulumi.com",
                "owner": "Coren",
                "project": "test-04-foobar-on-eks",
                "stack": "dev"
            }
        },
        "resources": [
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev",
                "custom": false,
                "type": "pulumi:pulumi:Stack",
                "outputs": {
                    "appImage": "729026535377.dkr.ecr.eu-west-3.amazonaws.com/whoami-1731201:ec90dce659a0384c09be3151397c7dd807d47001554943a3ed387ed5d5d4444c",
                    "appName": "whoami",
                    "eksKubeConfig": {
                        "apiVersion": "v1",
                        "clusters": [
                            {
                                "cluster": {
                                    "certificate-authority-data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                                    "server": "https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com"
                                },
                                "name": "kubernetes"
                            }
                        ],
                        "contexts": [
                            {
                                "context": {
                                    "cluster": "kubernetes",
                                    "user": "aws"
                                },
                                "name": "aws"
                            }
                        ],
                        "current-context": "aws",
                        "kind": "Config",
                        "users": [
                            {
                                "name": "aws",
                                "user": {
                                    "exec": {
                                        "apiVersion": "client.authentication.k8s.io/v1alpha1",
                                        "args": [
                                            "eks",
                                            "get-token",
                                            "--cluster-name",
                                            "cluster-eksCluster-697893c"
                                        ],
                                        "command": "aws"
                                    }
                                }
                            }
                        ]
                    }
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0",
                "custom": true,
                "id": "1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "type": "pulumi:providers:aws",
                "inputs": {
                    "region": "eu-west-3",
                    "version": "4.25.0"
                },
                "outputs": {
                    "region": "eu-west-3",
                    "version": "4.25.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository::whoami",
                "custom": false,
                "type": "awsx:ecr:Repository",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager::eks",
                "custom": false,
                "type": "foobar:cert-manager",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "custom": false,
                "type": "eks:index:Cluster",
                "outputs": {
                    "eksCluster": {
                        "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                        "id": "cluster-eksCluster-697893c",
                        "packageVersion": "",
                        "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                    },
                    "kubeconfig": {
                        "apiVersion": "v1",
                        "clusters": [
                            {
                                "cluster": {
                                    "certificate-authority-data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
                                    "server": "https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com"
                                },
                                "name": "kubernetes"
                            }
                        ],
                        "contexts": [
                            {
                                "context": {
                                    "cluster": "kubernetes",
                                    "user": "aws"
                                },
                                "name": "aws"
                            }
                        ],
                        "current-context": "aws",
                        "kind": "Config",
                        "users": [
                            {
                                "name": "aws",
                                "user": {
                                    "exec": {
                                        "apiVersion": "client.authentication.k8s.io/v1alpha1",
                                        "args": [
                                            "eks",
                                            "get-token",
                                            "--cluster-name",
                                            "cluster-eksCluster-697893c"
                                        ],
                                        "command": "aws"
                                    }
                                }
                            }
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "custom": false,
                "type": "awsx:x:ec2:Vpc",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:EksCluster::whoami",
                "custom": false,
                "type": "foobar:EksCluster",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:pulumi:Stack::test-04-foobar-on-eks-dev"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository$aws:ecr/repository:Repository::whoami",
                "custom": true,
                "id": "whoami-1731201",
                "type": "aws:ecr/repository:Repository",
                "inputs": {
                    "__defaults": [
                        "imageTagMutability",
                        "name"
                    ],
                    "imageTagMutability": "MUTABLE",
                    "name": "whoami-1731201"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"delete\":1200000000000}}",
                    "arn": "arn:aws:ecr:eu-west-3:729026535377:repository/whoami-1731201",
                    "encryptionConfigurations": [
                        {
                            "encryptionType": "AES256",
                            "kmsKey": ""
                        }
                    ],
                    "id": "whoami-1731201",
                    "imageScanningConfiguration": {
                        "scanOnPush": false
                    },
                    "imageTagMutability": "MUTABLE",
                    "name": "whoami-1731201",
                    "registryId": "729026535377",
                    "repositoryUrl": "729026535377.dkr.ecr.eu-west-3.amazonaws.com/whoami-1731201",
                    "tags": {},
                    "tagsAll": {}
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository::whoami",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:kubernetes::default_3_8_3",
                "custom": true,
                "id": "d1da839f-499b-4c31-9ca1-5db45fe4276f",
                "type": "pulumi:providers:kubernetes",
                "inputs": {
                    "version": "3.8.3"
                },
                "outputs": {
                    "version": "3.8.3"
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "custom": false,
                "type": "kubernetes:yaml:ConfigFile",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager::eks"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-eksRole",
                "custom": false,
                "type": "eks:index:ServiceRole",
                "outputs": {
                    "role": {
                        "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                        "id": "cluster-eksRole-role-37a7397",
                        "packageVersion": "",
                        "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role"
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-0",
                "custom": false,
                "type": "awsx:x:ec2:Subnet",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet::vpc-public-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-instanceRole",
                "custom": false,
                "type": "eks:index:ServiceRole",
                "outputs": {
                    "role": {
                        "4dabf18193072939515e22adb298388d": "5cf8f73096256a8f31e491e813e4eb8e",
                        "id": "cluster-instanceRole-role-e664a94",
                        "packageVersion": "",
                        "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-0",
                "custom": false,
                "type": "awsx:x:ec2:NatGateway",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-1",
                "custom": false,
                "type": "awsx:x:ec2:NatGateway",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway::vpc",
                "custom": false,
                "type": "awsx:x:ec2:InternetGateway",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc"
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-1",
                "custom": false,
                "type": "awsx:x:ec2:Subnet",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet::vpc-private-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-0",
                "custom": false,
                "type": "awsx:x:ec2:Subnet",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet::vpc-private-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-1",
                "custom": false,
                "type": "awsx:x:ec2:Subnet",
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet::vpc-public-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:eks::default",
                "custom": true,
                "id": "b6fc46ca-0a63-42a1-8bb4-2dab3ea3ec14",
                "type": "pulumi:providers:eks",
                "inputs": {
                    "version": "0.34.0"
                },
                "outputs": {
                    "version": "0.34.0"
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository$aws:ecr/lifecyclePolicy:LifecyclePolicy::whoami",
                "custom": true,
                "id": "whoami-1731201",
                "type": "aws:ecr/lifecyclePolicy:LifecyclePolicy",
                "inputs": {
                    "__defaults": [],
                    "policy": "{\"rules\":[{\"rulePriority\":1,\"description\":\"remove untagged images\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"imageCountMoreThan\",\"countNumber\":1},\"action\":{\"type\":\"expire\"}}]}",
                    "repository": "whoami-1731201"
                },
                "outputs": {
                    "id": "whoami-1731201",
                    "policy": "{\"rules\":[{\"rulePriority\":1,\"description\":\"remove untagged images\",\"selection\":{\"tagStatus\":\"untagged\",\"countType\":\"imageCountMoreThan\",\"countNumber\":1},\"action\":{\"type\":\"expire\"}}]}",
                    "registryId": "729026535377",
                    "repository": "whoami-1731201"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository::whoami",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository$aws:ecr/repository:Repository::whoami"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policy": null,
                    "repository": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository$aws:ecr/repository:Repository::whoami"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:ecr:Repository$aws:ecr/lifecyclePolicy:LifecyclePolicy::whoami"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:RandomSuffix::cluster-cfnStackName",
                "custom": true,
                "id": "cluster-cfnStackName",
                "type": "eks:index:RandomSuffix",
                "inputs": {
                    "input": "cluster"
                },
                "outputs": {
                    "output": "cluster-de9819ff"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:eks::default::b6fc46ca-0a63-42a1-8bb4-2dab3ea3ec14",
                "propertyDependencies": {
                    "input": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi-nodejs:dynamic:Resource::cluster-cfnStackName"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-0",
                "custom": true,
                "id": "eipalloc-00fcaeb3541f02487",
                "type": "aws:ec2/eip:Eip",
                "inputs": {
                    "__defaults": [],
                    "tags": {
                        "Name": "vpc-0",
                        "__defaults": []
                    },
                    "vpc": true
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"delete\":180000000000,\"read\":900000000000,\"update\":300000000000}}",
                    "associationId": "",
                    "carrierIp": "",
                    "customerOwnedIp": "",
                    "customerOwnedIpv4Pool": "",
                    "domain": "vpc",
                    "id": "eipalloc-00fcaeb3541f02487",
                    "instance": "",
                    "networkBorderGroup": "eu-west-3",
                    "networkInterface": "",
                    "privateIp": "",
                    "publicDns": "ec2-13-37-162-248.eu-west-3.compute.amazonaws.com",
                    "publicIp": "13.37.162.248",
                    "publicIpv4Pool": "amazon",
                    "tags": {
                        "Name": "vpc-0"
                    },
                    "tagsAll": {
                        "Name": "vpc-0"
                    },
                    "vpc": true
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-0",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "tags": null,
                    "vpc": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-1",
                "custom": true,
                "id": "eipalloc-054b74be63f983491",
                "type": "aws:ec2/eip:Eip",
                "inputs": {
                    "__defaults": [],
                    "tags": {
                        "Name": "vpc-1",
                        "__defaults": []
                    },
                    "vpc": true
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"delete\":180000000000,\"read\":900000000000,\"update\":300000000000}}",
                    "associationId": "",
                    "carrierIp": "",
                    "customerOwnedIp": "",
                    "customerOwnedIpv4Pool": "",
                    "domain": "vpc",
                    "id": "eipalloc-054b74be63f983491",
                    "instance": "",
                    "networkBorderGroup": "eu-west-3",
                    "networkInterface": "",
                    "privateIp": "",
                    "publicDns": "ec2-13-37-72-104.eu-west-3.compute.amazonaws.com",
                    "publicIp": "13.37.72.104",
                    "publicIpv4Pool": "amazon",
                    "tags": {
                        "Name": "vpc-1"
                    },
                    "tagsAll": {
                        "Name": "vpc-1"
                    },
                    "vpc": true
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-1",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "tags": null,
                    "vpc": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role",
                "custom": true,
                "id": "cluster-instanceRole-role-e664a94",
                "type": "aws:iam/role:Role",
                "inputs": {
                    "__defaults": [
                        "forceDetachPolicies",
                        "maxSessionDuration",
                        "name",
                        "path"
                    ],
                    "assumeRolePolicy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"ec2.amazonaws.com\"]}}]}",
                    "forceDetachPolicies": false,
                    "maxSessionDuration": 3600,
                    "name": "cluster-instanceRole-role-e664a94",
                    "path": "/"
                },
                "outputs": {
                    "arn": "arn:aws:iam::729026535377:role/cluster-instanceRole-role-e664a94",
                    "assumeRolePolicy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                    "createDate": "2021-11-04T10:19:00Z",
                    "description": "",
                    "forceDetachPolicies": false,
                    "id": "cluster-instanceRole-role-e664a94",
                    "inlinePolicies": [
                        {
                            "name": "",
                            "policy": ""
                        }
                    ],
                    "managedPolicyArns": [],
                    "maxSessionDuration": 3600,
                    "name": "cluster-instanceRole-role-e664a94",
                    "namePrefix": "",
                    "path": "/",
                    "tags": {},
                    "tagsAll": {},
                    "uniqueId": "AROA2TPK6D7IU4KI7VHJM"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-instanceRole",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assumeRolePolicy": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role",
                "custom": true,
                "id": "cluster-eksRole-role-37a7397",
                "type": "aws:iam/role:Role",
                "inputs": {
                    "__defaults": [
                        "forceDetachPolicies",
                        "maxSessionDuration",
                        "name",
                        "path"
                    ],
                    "assumeRolePolicy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"sts:AssumeRole\"],\"Effect\":\"Allow\",\"Principal\":{\"Service\":[\"eks.amazonaws.com\"]}}]}",
                    "description": "Allows EKS to manage clusters on your behalf.",
                    "forceDetachPolicies": false,
                    "maxSessionDuration": 3600,
                    "name": "cluster-eksRole-role-37a7397",
                    "path": "/"
                },
                "outputs": {
                    "arn": "arn:aws:iam::729026535377:role/cluster-eksRole-role-37a7397",
                    "assumeRolePolicy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"eks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                    "createDate": "2021-11-04T10:19:00Z",
                    "description": "Allows EKS to manage clusters on your behalf.",
                    "forceDetachPolicies": false,
                    "id": "cluster-eksRole-role-37a7397",
                    "inlinePolicies": [
                        {
                            "name": "",
                            "policy": ""
                        }
                    ],
                    "managedPolicyArns": [],
                    "maxSessionDuration": 3600,
                    "name": "cluster-eksRole-role-37a7397",
                    "namePrefix": "",
                    "path": "/",
                    "tags": {},
                    "tagsAll": {},
                    "uniqueId": "AROA2TPK6D7IWK2V7XIXL"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-eksRole",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assumeRolePolicy": null,
                    "description": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-03516f97",
                "custom": true,
                "id": "cluster-instanceRole-role-e664a94-20211104101904016000000001",
                "type": "aws:iam/rolePolicyAttachment:RolePolicyAttachment",
                "inputs": {
                    "__defaults": [],
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "outputs": {
                    "id": "cluster-instanceRole-role-e664a94-20211104101904016000000001",
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-instanceRole",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policyArn": null,
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-3eb088f2",
                "custom": true,
                "id": "cluster-instanceRole-role-e664a94-20211104101904055100000002",
                "type": "aws:iam/rolePolicyAttachment:RolePolicyAttachment",
                "inputs": {
                    "__defaults": [],
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "outputs": {
                    "id": "cluster-instanceRole-role-e664a94-20211104101904055100000002",
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-instanceRole",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policyArn": null,
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-e1b295bd",
                "custom": true,
                "id": "cluster-instanceRole-role-e664a94-20211104101904316300000003",
                "type": "aws:iam/rolePolicyAttachment:RolePolicyAttachment",
                "inputs": {
                    "__defaults": [],
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "outputs": {
                    "id": "cluster-instanceRole-role-e664a94-20211104101904316300000003",
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-instanceRole",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policyArn": null,
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-90eb1c99",
                "custom": true,
                "id": "cluster-eksRole-role-37a7397-20211104101904573100000004",
                "type": "aws:iam/rolePolicyAttachment:RolePolicyAttachment",
                "inputs": {
                    "__defaults": [],
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
                    "role": "cluster-eksRole-role-37a7397"
                },
                "outputs": {
                    "id": "cluster-eksRole-role-37a7397-20211104101904573100000004",
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
                    "role": "cluster-eksRole-role-37a7397"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-eksRole",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policyArn": null,
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-4b490823",
                "custom": true,
                "id": "cluster-eksRole-role-37a7397-20211104101904822900000005",
                "type": "aws:iam/rolePolicyAttachment:RolePolicyAttachment",
                "inputs": {
                    "__defaults": [],
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                    "role": "cluster-eksRole-role-37a7397"
                },
                "outputs": {
                    "id": "cluster-eksRole-role-37a7397-20211104101904822900000005",
                    "policyArn": "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
                    "role": "cluster-eksRole-role-37a7397"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole::cluster-eksRole",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "policyArn": null,
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:iam/instanceProfile:InstanceProfile::cluster-instanceProfile",
                "custom": true,
                "id": "cluster-instanceProfile-42aaea5",
                "type": "aws:iam/instanceProfile:InstanceProfile",
                "inputs": {
                    "__defaults": [
                        "name",
                        "path"
                    ],
                    "name": "cluster-instanceProfile-42aaea5",
                    "path": "/",
                    "role": "cluster-instanceRole-role-e664a94"
                },
                "outputs": {
                    "arn": "arn:aws:iam::729026535377:instance-profile/cluster-instanceProfile-42aaea5",
                    "createDate": "2021-11-04T10:19:06Z",
                    "id": "cluster-instanceProfile-42aaea5",
                    "name": "cluster-instanceProfile-42aaea5",
                    "path": "/",
                    "role": "cluster-instanceRole-role-e664a94",
                    "tags": {},
                    "tagsAll": {},
                    "uniqueId": "AIPA2TPK6D7I5UP7L5JVO"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-03516f97",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-e1b295bd",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-3eb088f2"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "role": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-03516f97",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-e1b295bd",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-3eb088f2"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc",
                "custom": true,
                "id": "vpc-0769dae12adb66025",
                "type": "aws:ec2/vpc:Vpc",
                "inputs": {
                    "__defaults": [],
                    "assignGeneratedIpv6CidrBlock": false,
                    "cidrBlock": "10.0.0.0/16",
                    "enableDnsHostnames": true,
                    "enableDnsSupport": true,
                    "instanceTenancy": "default"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:vpc/vpc-0769dae12adb66025",
                    "assignGeneratedIpv6CidrBlock": false,
                    "cidrBlock": "10.0.0.0/16",
                    "defaultNetworkAclId": "acl-0da0dbe671be48b48",
                    "defaultRouteTableId": "rtb-0aad6eecc7cff36c9",
                    "defaultSecurityGroupId": "sg-0c5988218b6473fd0",
                    "dhcpOptionsId": "dopt-00a6272d3ab4f727b",
                    "enableDnsHostnames": true,
                    "enableDnsSupport": true,
                    "id": "vpc-0769dae12adb66025",
                    "instanceTenancy": "default",
                    "ipv6AssociationId": "",
                    "ipv6CidrBlock": "",
                    "mainRouteTableId": "rtb-0aad6eecc7cff36c9",
                    "ownerId": "729026535377",
                    "tags": {},
                    "tagsAll": {}
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc::vpc",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assignGeneratedIpv6CidrBlock": null,
                    "cidrBlock": null,
                    "enableDnsHostnames": null,
                    "enableDnsSupport": null,
                    "instanceTenancy": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::aws:ec2/vpc:Vpc::vpc"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0",
                "custom": true,
                "id": "rtb-0a54b415cac0e56ad",
                "type": "aws:ec2/routeTable:RouteTable",
                "inputs": {
                    "__defaults": [],
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:route-table/rtb-0a54b415cac0e56ad",
                    "id": "rtb-0a54b415cac0e56ad",
                    "ownerId": "729026535377",
                    "propagatingVgws": [],
                    "routes": [],
                    "tags": {},
                    "tagsAll": {},
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup",
                "custom": true,
                "id": "sg-082aec91aad27a684",
                "type": "aws:ec2/securityGroup:SecurityGroup",
                "inputs": {
                    "__defaults": [
                        "name"
                    ],
                    "description": "Managed by Pulumi",
                    "name": "cluster-eksClusterSecurityGroup-9652958",
                    "revokeRulesOnDelete": true,
                    "tags": {
                        "Name": "cluster-eksClusterSecurityGroup",
                        "__defaults": []
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":900000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:security-group/sg-082aec91aad27a684",
                    "description": "Managed by Pulumi",
                    "egress": [],
                    "id": "sg-082aec91aad27a684",
                    "ingress": [],
                    "name": "cluster-eksClusterSecurityGroup-9652958",
                    "namePrefix": "",
                    "ownerId": "729026535377",
                    "revokeRulesOnDelete": true,
                    "tags": {
                        "Name": "cluster-eksClusterSecurityGroup"
                    },
                    "tagsAll": {
                        "Name": "cluster-eksClusterSecurityGroup"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "revokeRulesOnDelete": null,
                    "tags": null,
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1",
                "custom": true,
                "id": "rtb-05d85455d27a26c15",
                "type": "aws:ec2/routeTable:RouteTable",
                "inputs": {
                    "__defaults": [],
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:route-table/rtb-05d85455d27a26c15",
                    "id": "rtb-05d85455d27a26c15",
                    "ownerId": "729026535377",
                    "propagatingVgws": [],
                    "routes": [],
                    "tags": {},
                    "tagsAll": {},
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0",
                "custom": true,
                "id": "rtb-0471f01468da382a2",
                "type": "aws:ec2/routeTable:RouteTable",
                "inputs": {
                    "__defaults": [],
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:route-table/rtb-0471f01468da382a2",
                    "id": "rtb-0471f01468da382a2",
                    "ownerId": "729026535377",
                    "propagatingVgws": [],
                    "routes": [],
                    "tags": {},
                    "tagsAll": {},
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-0",
                "custom": true,
                "id": "subnet-097c1bca475062340",
                "type": "aws:ec2/subnet:Subnet",
                "inputs": {
                    "__defaults": [],
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3a",
                    "cidrBlock": "10.0.128.0/18",
                    "mapPublicIpOnLaunch": false,
                    "tags": {
                        "Name": "vpc-private-0",
                        "__defaults": [],
                        "type": "private"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":1200000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:subnet/subnet-097c1bca475062340",
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3a",
                    "availabilityZoneId": "euw3-az1",
                    "cidrBlock": "10.0.128.0/18",
                    "customerOwnedIpv4Pool": "",
                    "id": "subnet-097c1bca475062340",
                    "ipv6CidrBlock": "",
                    "ipv6CidrBlockAssociationId": "",
                    "mapCustomerOwnedIpOnLaunch": false,
                    "mapPublicIpOnLaunch": false,
                    "outpostArn": "",
                    "ownerId": "729026535377",
                    "tags": {
                        "Name": "vpc-private-0",
                        "type": "private"
                    },
                    "tagsAll": {
                        "Name": "vpc-private-0",
                        "type": "private"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assignIpv6AddressOnCreation": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ],
                    "availabilityZone": null,
                    "cidrBlock": null,
                    "mapPublicIpOnLaunch": null,
                    "tags": null,
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-1",
                "custom": true,
                "id": "subnet-086d50ce0a4b679d2",
                "type": "aws:ec2/subnet:Subnet",
                "inputs": {
                    "__defaults": [],
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3b",
                    "cidrBlock": "10.0.192.0/18",
                    "mapPublicIpOnLaunch": false,
                    "tags": {
                        "Name": "vpc-private-1",
                        "__defaults": [],
                        "type": "private"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":1200000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:subnet/subnet-086d50ce0a4b679d2",
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3b",
                    "availabilityZoneId": "euw3-az2",
                    "cidrBlock": "10.0.192.0/18",
                    "customerOwnedIpv4Pool": "",
                    "id": "subnet-086d50ce0a4b679d2",
                    "ipv6CidrBlock": "",
                    "ipv6CidrBlockAssociationId": "",
                    "mapCustomerOwnedIpOnLaunch": false,
                    "mapPublicIpOnLaunch": false,
                    "outpostArn": "",
                    "ownerId": "729026535377",
                    "tags": {
                        "Name": "vpc-private-1",
                        "type": "private"
                    },
                    "tagsAll": {
                        "Name": "vpc-private-1",
                        "type": "private"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assignIpv6AddressOnCreation": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ],
                    "availabilityZone": null,
                    "cidrBlock": null,
                    "mapPublicIpOnLaunch": null,
                    "tags": null,
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1",
                "custom": true,
                "id": "rtb-025e96ae0bd7b5a7c",
                "type": "aws:ec2/routeTable:RouteTable",
                "inputs": {
                    "__defaults": [],
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:route-table/rtb-025e96ae0bd7b5a7c",
                    "id": "rtb-025e96ae0bd7b5a7c",
                    "ownerId": "729026535377",
                    "propagatingVgws": [],
                    "routes": [],
                    "tags": {},
                    "tagsAll": {},
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway$aws:ec2/internetGateway:InternetGateway::vpc",
                "custom": true,
                "id": "igw-081f2ffa920b609b8",
                "type": "aws:ec2/internetGateway:InternetGateway",
                "inputs": {
                    "__defaults": [],
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:internet-gateway/igw-081f2ffa920b609b8",
                    "id": "igw-081f2ffa920b609b8",
                    "ownerId": "729026535377",
                    "tags": {},
                    "tagsAll": {},
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway::vpc",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksClusterInternetEgressRule",
                "custom": true,
                "id": "sgrule-1999115236",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "cidrBlocks": [
                        "0.0.0.0/0"
                    ],
                    "description": "Allow internet access.",
                    "fromPort": 0,
                    "protocol": "-1",
                    "securityGroupId": "sg-082aec91aad27a684",
                    "toPort": 0,
                    "type": "egress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "cidrBlocks": [
                        "0.0.0.0/0"
                    ],
                    "description": "Allow internet access.",
                    "fromPort": 0,
                    "id": "sgrule-1999115236",
                    "protocol": "-1",
                    "securityGroupId": "sg-082aec91aad27a684",
                    "self": false,
                    "toPort": 0,
                    "type": "egress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "cidrBlocks": null,
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                    ],
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-private-0",
                "custom": true,
                "id": "rtbassoc-0b92c12b430edec10",
                "type": "aws:ec2/routeTableAssociation:RouteTableAssociation",
                "inputs": {
                    "__defaults": [],
                    "routeTableId": "rtb-0471f01468da382a2",
                    "subnetId": "subnet-097c1bca475062340"
                },
                "outputs": {
                    "gatewayId": "",
                    "id": "rtbassoc-0b92c12b430edec10",
                    "routeTableId": "rtb-0471f01468da382a2",
                    "subnetId": "subnet-097c1bca475062340"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-0"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-0"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-private-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-private-1",
                "custom": true,
                "id": "rtbassoc-0e63160d22e04fc5e",
                "type": "aws:ec2/routeTableAssociation:RouteTableAssociation",
                "inputs": {
                    "__defaults": [],
                    "routeTableId": "rtb-025e96ae0bd7b5a7c",
                    "subnetId": "subnet-086d50ce0a4b679d2"
                },
                "outputs": {
                    "gatewayId": "",
                    "id": "rtbassoc-0e63160d22e04fc5e",
                    "routeTableId": "rtb-025e96ae0bd7b5a7c",
                    "subnetId": "subnet-086d50ce0a4b679d2"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-private-1"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-private-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-public-0-ig",
                "custom": true,
                "id": "r-rtb-0a54b415cac0e56ad1080289494",
                "type": "aws:ec2/route:Route",
                "inputs": {
                    "__defaults": [],
                    "destinationCidrBlock": "0.0.0.0/0",
                    "gatewayId": "igw-081f2ffa920b609b8",
                    "routeTableId": "rtb-0a54b415cac0e56ad"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "carrierGatewayId": "",
                    "destinationCidrBlock": "0.0.0.0/0",
                    "destinationIpv6CidrBlock": "",
                    "destinationPrefixListId": "",
                    "egressOnlyGatewayId": "",
                    "gatewayId": "igw-081f2ffa920b609b8",
                    "id": "r-rtb-0a54b415cac0e56ad1080289494",
                    "instanceId": "",
                    "instanceOwnerId": "",
                    "localGatewayId": "",
                    "natGatewayId": "",
                    "networkInterfaceId": "",
                    "origin": "CreateRoute",
                    "routeTableId": "rtb-0a54b415cac0e56ad",
                    "state": "active",
                    "transitGatewayId": "",
                    "vpcEndpointId": "",
                    "vpcPeeringConnectionId": ""
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway$aws:ec2/internetGateway:InternetGateway::vpc",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "destinationCidrBlock": null,
                    "gatewayId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway$aws:ec2/internetGateway:InternetGateway::vpc"
                    ],
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-public-0-ig"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-public-1-ig",
                "custom": true,
                "id": "r-rtb-05d85455d27a26c151080289494",
                "type": "aws:ec2/route:Route",
                "inputs": {
                    "__defaults": [],
                    "destinationCidrBlock": "0.0.0.0/0",
                    "gatewayId": "igw-081f2ffa920b609b8",
                    "routeTableId": "rtb-05d85455d27a26c15"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "carrierGatewayId": "",
                    "destinationCidrBlock": "0.0.0.0/0",
                    "destinationIpv6CidrBlock": "",
                    "destinationPrefixListId": "",
                    "egressOnlyGatewayId": "",
                    "gatewayId": "igw-081f2ffa920b609b8",
                    "id": "r-rtb-05d85455d27a26c151080289494",
                    "instanceId": "",
                    "instanceOwnerId": "",
                    "localGatewayId": "",
                    "natGatewayId": "",
                    "networkInterfaceId": "",
                    "origin": "CreateRoute",
                    "routeTableId": "rtb-05d85455d27a26c15",
                    "state": "active",
                    "transitGatewayId": "",
                    "vpcEndpointId": "",
                    "vpcPeeringConnectionId": ""
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway$aws:ec2/internetGateway:InternetGateway::vpc",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "destinationCidrBlock": null,
                    "gatewayId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:InternetGateway$aws:ec2/internetGateway:InternetGateway::vpc"
                    ],
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-public-1-ig"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                "custom": true,
                "id": "subnet-0baf5e7e749a9f05a",
                "type": "aws:ec2/subnet:Subnet",
                "inputs": {
                    "__defaults": [],
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3b",
                    "cidrBlock": "10.0.64.0/18",
                    "mapPublicIpOnLaunch": true,
                    "tags": {
                        "Name": "vpc-public-1",
                        "__defaults": [],
                        "type": "public"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":1200000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:subnet/subnet-0baf5e7e749a9f05a",
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3b",
                    "availabilityZoneId": "euw3-az2",
                    "cidrBlock": "10.0.64.0/18",
                    "customerOwnedIpv4Pool": "",
                    "id": "subnet-0baf5e7e749a9f05a",
                    "ipv6CidrBlock": "",
                    "ipv6CidrBlockAssociationId": "",
                    "mapCustomerOwnedIpOnLaunch": false,
                    "mapPublicIpOnLaunch": true,
                    "outpostArn": "",
                    "ownerId": "729026535377",
                    "tags": {
                        "Name": "vpc-public-1",
                        "type": "public"
                    },
                    "tagsAll": {
                        "Name": "vpc-public-1",
                        "type": "public"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assignIpv6AddressOnCreation": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ],
                    "availabilityZone": null,
                    "cidrBlock": null,
                    "mapPublicIpOnLaunch": null,
                    "tags": null,
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                "custom": true,
                "id": "subnet-0b81ca05f2c287927",
                "type": "aws:ec2/subnet:Subnet",
                "inputs": {
                    "__defaults": [],
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3a",
                    "cidrBlock": "10.0.0.0/18",
                    "mapPublicIpOnLaunch": true,
                    "tags": {
                        "Name": "vpc-public-0",
                        "__defaults": [],
                        "type": "public"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":1200000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:subnet/subnet-0b81ca05f2c287927",
                    "assignIpv6AddressOnCreation": false,
                    "availabilityZone": "eu-west-3a",
                    "availabilityZoneId": "euw3-az1",
                    "cidrBlock": "10.0.0.0/18",
                    "customerOwnedIpv4Pool": "",
                    "id": "subnet-0b81ca05f2c287927",
                    "ipv6CidrBlock": "",
                    "ipv6CidrBlockAssociationId": "",
                    "mapCustomerOwnedIpOnLaunch": false,
                    "mapPublicIpOnLaunch": true,
                    "outpostArn": "",
                    "ownerId": "729026535377",
                    "tags": {
                        "Name": "vpc-public-0",
                        "type": "public"
                    },
                    "tagsAll": {
                        "Name": "vpc-public-0",
                        "type": "public"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "assignIpv6AddressOnCreation": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ],
                    "availabilityZone": null,
                    "cidrBlock": null,
                    "mapPublicIpOnLaunch": null,
                    "tags": null,
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1",
                "custom": true,
                "id": "rtbassoc-0c62ca79bee5b5ea6",
                "type": "aws:ec2/routeTableAssociation:RouteTableAssociation",
                "inputs": {
                    "__defaults": [],
                    "routeTableId": "rtb-05d85455d27a26c15",
                    "subnetId": "subnet-0baf5e7e749a9f05a"
                },
                "outputs": {
                    "gatewayId": "",
                    "id": "rtbassoc-0c62ca79bee5b5ea6",
                    "routeTableId": "rtb-05d85455d27a26c15",
                    "subnetId": "subnet-0baf5e7e749a9f05a"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-1"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0",
                "custom": true,
                "id": "rtbassoc-0300aea6d66580f57",
                "type": "aws:ec2/routeTableAssociation:RouteTableAssociation",
                "inputs": {
                    "__defaults": [],
                    "routeTableId": "rtb-0a54b415cac0e56ad",
                    "subnetId": "subnet-0b81ca05f2c287927"
                },
                "outputs": {
                    "gatewayId": "",
                    "id": "rtbassoc-0300aea6d66580f57",
                    "routeTableId": "rtb-0a54b415cac0e56ad",
                    "subnetId": "subnet-0b81ca05f2c287927"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-public-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-public-0"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-0",
                "custom": true,
                "id": "nat-03d31392ab5e42466",
                "type": "aws:ec2/natGateway:NatGateway",
                "inputs": {
                    "__defaults": [
                        "connectivityType"
                    ],
                    "allocationId": "eipalloc-00fcaeb3541f02487",
                    "connectivityType": "public",
                    "subnetId": "subnet-0b81ca05f2c287927"
                },
                "outputs": {
                    "allocationId": "eipalloc-00fcaeb3541f02487",
                    "connectivityType": "public",
                    "id": "nat-03d31392ab5e42466",
                    "networkInterfaceId": "eni-07ec3917f9b3e0de4",
                    "privateIp": "10.0.18.145",
                    "publicIp": "13.37.162.248",
                    "subnetId": "subnet-0b81ca05f2c287927",
                    "tags": {},
                    "tagsAll": {}
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "allocationId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-0"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-private-0-nat-0",
                "custom": true,
                "id": "r-rtb-0471f01468da382a21080289494",
                "type": "aws:ec2/route:Route",
                "inputs": {
                    "__defaults": [],
                    "destinationCidrBlock": "0.0.0.0/0",
                    "natGatewayId": "nat-03d31392ab5e42466",
                    "routeTableId": "rtb-0471f01468da382a2"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "carrierGatewayId": "",
                    "destinationCidrBlock": "0.0.0.0/0",
                    "destinationIpv6CidrBlock": "",
                    "destinationPrefixListId": "",
                    "egressOnlyGatewayId": "",
                    "gatewayId": "",
                    "id": "r-rtb-0471f01468da382a21080289494",
                    "instanceId": "",
                    "instanceOwnerId": "",
                    "localGatewayId": "",
                    "natGatewayId": "nat-03d31392ab5e42466",
                    "networkInterfaceId": "",
                    "origin": "CreateRoute",
                    "routeTableId": "rtb-0471f01468da382a2",
                    "state": "active",
                    "transitGatewayId": "",
                    "vpcEndpointId": "",
                    "vpcPeeringConnectionId": ""
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-0",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "destinationCidrBlock": null,
                    "natGatewayId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-0"
                    ],
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-0"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-private-0-nat-0"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-1",
                "custom": true,
                "id": "nat-0ba0ba59673e29180",
                "type": "aws:ec2/natGateway:NatGateway",
                "inputs": {
                    "__defaults": [
                        "connectivityType"
                    ],
                    "allocationId": "eipalloc-054b74be63f983491",
                    "connectivityType": "public",
                    "subnetId": "subnet-0baf5e7e749a9f05a"
                },
                "outputs": {
                    "allocationId": "eipalloc-054b74be63f983491",
                    "connectivityType": "public",
                    "id": "nat-0ba0ba59673e29180",
                    "networkInterfaceId": "eni-02f17e1eadef2ab43",
                    "privateIp": "10.0.103.43",
                    "publicIp": "13.37.72.104",
                    "subnetId": "subnet-0baf5e7e749a9f05a",
                    "tags": {},
                    "tagsAll": {}
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway::vpc-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "allocationId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/eip:Eip::vpc-1"
                    ],
                    "subnetId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-private-1-nat-1",
                "custom": true,
                "id": "r-rtb-025e96ae0bd7b5a7c1080289494",
                "type": "aws:ec2/route:Route",
                "inputs": {
                    "__defaults": [],
                    "destinationCidrBlock": "0.0.0.0/0",
                    "natGatewayId": "nat-0ba0ba59673e29180",
                    "routeTableId": "rtb-025e96ae0bd7b5a7c"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":120000000000,\"delete\":300000000000,\"update\":120000000000}}",
                    "carrierGatewayId": "",
                    "destinationCidrBlock": "0.0.0.0/0",
                    "destinationIpv6CidrBlock": "",
                    "destinationPrefixListId": "",
                    "egressOnlyGatewayId": "",
                    "gatewayId": "",
                    "id": "r-rtb-025e96ae0bd7b5a7c1080289494",
                    "instanceId": "",
                    "instanceOwnerId": "",
                    "localGatewayId": "",
                    "natGatewayId": "nat-0ba0ba59673e29180",
                    "networkInterfaceId": "",
                    "origin": "CreateRoute",
                    "routeTableId": "rtb-025e96ae0bd7b5a7c",
                    "state": "active",
                    "transitGatewayId": "",
                    "vpcEndpointId": "",
                    "vpcPeeringConnectionId": ""
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet::vpc-private-1",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "destinationCidrBlock": null,
                    "natGatewayId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:NatGateway$aws:ec2/natGateway:NatGateway::vpc-1"
                    ],
                    "routeTableId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTable:RouteTable::vpc-private-1"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Subnet$aws:ec2/route:Route::vpc-private-1-nat-1"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                "custom": true,
                "id": "cluster-eksCluster-697893c",
                "type": "aws:eks/cluster:Cluster",
                "inputs": {
                    "__defaults": [
                        "name"
                    ],
                    "name": "cluster-eksCluster-697893c",
                    "roleArn": "arn:aws:iam::729026535377:role/cluster-eksRole-role-37a7397",
                    "tags": {
                        "Name": "cluster-eksCluster",
                        "__defaults": []
                    },
                    "vpcConfig": {
                        "__defaults": [
                            "endpointPrivateAccess",
                            "endpointPublicAccess"
                        ],
                        "endpointPrivateAccess": false,
                        "endpointPublicAccess": true,
                        "securityGroupIds": [
                            "sg-082aec91aad27a684"
                        ],
                        "subnetIds": [
                            "subnet-0b81ca05f2c287927",
                            "subnet-0baf5e7e749a9f05a"
                        ]
                    }
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":1800000000000,\"delete\":900000000000,\"update\":3600000000000}}",
                    "arn": "arn:aws:eks:eu-west-3:729026535377:cluster/cluster-eksCluster-697893c",
                    "certificateAuthority": {
                        "data": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
                    },
                    "createdAt": "2021-11-04 10:19:29.365 +0000 UTC",
                    "enabledClusterLogTypes": [],
                    "encryptionConfig": null,
                    "endpoint": "https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com",
                    "id": "cluster-eksCluster-697893c",
                    "identities": [
                        {
                            "oidcs": [
                                {
                                    "issuer": "https://oidc.eks.eu-west-3.amazonaws.com/id/3DFC3D23A9F64CB49E96331CC5E4A68D"
                                }
                            ]
                        }
                    ],
                    "kubernetesNetworkConfig": {
                        "serviceIpv4Cidr": "172.20.0.0/16"
                    },
                    "name": "cluster-eksCluster-697893c",
                    "platformVersion": "eks.2",
                    "roleArn": "arn:aws:iam::729026535377:role/cluster-eksRole-role-37a7397",
                    "status": "ACTIVE",
                    "tags": {
                        "Name": "cluster-eksCluster"
                    },
                    "tagsAll": {
                        "Name": "cluster-eksCluster"
                    },
                    "version": "1.21",
                    "vpcConfig": {
                        "clusterSecurityGroupId": "sg-07d5726d053a84895",
                        "endpointPrivateAccess": false,
                        "endpointPublicAccess": true,
                        "publicAccessCidrs": [
                            "0.0.0.0/0"
                        ],
                        "securityGroupIds": [
                            "sg-082aec91aad27a684"
                        ],
                        "subnetIds": [
                            "subnet-0b81ca05f2c287927",
                            "subnet-0baf5e7e749a9f05a"
                        ],
                        "vpcId": "vpc-0769dae12adb66025"
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-4b490823",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-90eb1c99",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "roleArn": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-eksRole-role",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-4b490823",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-eksRole-90eb1c99"
                    ],
                    "tags": null,
                    "vpcConfig": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-eks-k8s",
                "custom": true,
                "id": "311d66ce-9f3f-4efc-9ddd-5941eff6d93c",
                "type": "pulumi:providers:kubernetes",
                "inputs": {
                    "kubeconfig": "{\"apiVersion\":\"v1\",\"clusters\":[{\"cluster\":{\"server\":\"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\",\"certificate-authority-data\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"},\"name\":\"kubernetes\"}],\"contexts\":[{\"context\":{\"cluster\":\"kubernetes\",\"user\":\"aws\"},\"name\":\"aws\"}],\"current-context\":\"aws\",\"kind\":\"Config\",\"users\":[{\"name\":\"aws\",\"user\":{\"exec\":{\"apiVersion\":\"client.authentication.k8s.io/v1alpha1\",\"command\":\"aws\",\"args\":[\"eks\",\"get-token\",\"--cluster-name\",\"cluster-eksCluster-697893c\"]}}}]}",
                    "version": "3.8.3"
                },
                "outputs": {
                    "kubeconfig": "{\"apiVersion\":\"v1\",\"clusters\":[{\"cluster\":{\"server\":\"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\",\"certificate-authority-data\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"},\"name\":\"kubernetes\"}],\"contexts\":[{\"context\":{\"cluster\":\"kubernetes\",\"user\":\"aws\"},\"name\":\"aws\"}],\"current-context\":\"aws\",\"kind\":\"Config\",\"users\":[{\"name\":\"aws\",\"user\":{\"exec\":{\"apiVersion\":\"client.authentication.k8s.io/v1alpha1\",\"command\":\"aws\",\"args\":[\"eks\",\"get-token\",\"--cluster-name\",\"cluster-eksCluster-697893c\"]}}}]}",
                    "version": "3.8.3"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                ],
                "propertyDependencies": {
                    "kubeconfig": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup",
                "custom": true,
                "id": "sg-0a499e49f3d9a2dcc",
                "type": "aws:ec2/securityGroup:SecurityGroup",
                "inputs": {
                    "__defaults": [
                        "name"
                    ],
                    "description": "Managed by Pulumi",
                    "name": "cluster-nodeSecurityGroup-a2c6cfc",
                    "revokeRulesOnDelete": true,
                    "tags": {
                        "Name": "cluster-nodeSecurityGroup",
                        "__defaults": [],
                        "kubernetes.io/cluster/cluster-eksCluster-697893c": "owned"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":600000000000,\"delete\":900000000000},\"schema_version\":\"1\"}",
                    "arn": "arn:aws:ec2:eu-west-3:729026535377:security-group/sg-0a499e49f3d9a2dcc",
                    "description": "Managed by Pulumi",
                    "egress": [],
                    "id": "sg-0a499e49f3d9a2dcc",
                    "ingress": [],
                    "name": "cluster-nodeSecurityGroup-a2c6cfc",
                    "namePrefix": "",
                    "ownerId": "729026535377",
                    "revokeRulesOnDelete": true,
                    "tags": {
                        "Name": "cluster-nodeSecurityGroup",
                        "kubernetes.io/cluster/cluster-eksCluster-697893c": "owned"
                    },
                    "tagsAll": {
                        "Name": "cluster-nodeSecurityGroup",
                        "kubernetes.io/cluster/cluster-eksCluster-697893c": "owned"
                    },
                    "vpcId": "vpc-0769dae12adb66025"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "revokeRulesOnDelete": null,
                    "tags": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                    ],
                    "vpcId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$aws:ec2/vpc:Vpc::vpc"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$kubernetes:core/v1:ConfigMap::cluster-nodeAccess",
                "custom": true,
                "id": "kube-system/aws-auth",
                "type": "kubernetes:core/v1:ConfigMap",
                "inputs": {
                    "apiVersion": "v1",
                    "data": {
                        "mapRoles": "- rolearn: 'arn:aws:iam::729026535377:role/cluster-instanceRole-role-e664a94'\n  username: 'system:node:{{EC2PrivateDNSName}}'\n  groups:\n    - 'system:bootstrappers'\n    - 'system:nodes'\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "aws-auth",
                        "namespace": "kube-system"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "data": {
                            "mapRoles": "- rolearn: 'arn:aws:iam::729026535377:role/cluster-instanceRole-role-e664a94'\n  username: 'system:node:{{EC2PrivateDNSName}}'\n  groups:\n    - 'system:bootstrappers'\n    - 'system:nodes'\n"
                        },
                        "kind": "ConfigMap",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "aws-auth",
                            "namespace": "kube-system"
                        }
                    },
                    "apiVersion": "v1",
                    "data": {
                        "mapRoles": "- rolearn: 'arn:aws:iam::729026535377:role/cluster-instanceRole-role-e664a94'\n  username: 'system:node:{{EC2PrivateDNSName}}'\n  groups:\n    - 'system:bootstrappers'\n    - 'system:nodes'\n"
                    },
                    "kind": "ConfigMap",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"data\":{\"mapRoles\":\"- rolearn: 'arn:aws:iam::729026535377:role/cluster-instanceRole-role-e664a94'\\n  username: 'system:node:{{EC2PrivateDNSName}}'\\n  groups:\\n    - 'system:bootstrappers'\\n    - 'system:nodes'\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"aws-auth\",\"namespace\":\"kube-system\"}}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:29:13Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:data": {
                                        ".": {},
                                        "f:mapRoles": {}
                                    },
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:29:13Z"
                            }
                        ],
                        "name": "aws-auth",
                        "namespace": "kube-system",
                        "resourceVersion": "656",
                        "uid": "6f374e9a-4caf-4fba-9b23-9dcf23fe4bca"
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-03516f97",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-e1b295bd",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-3eb088f2"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-eks-k8s::311d66ce-9f3f-4efc-9ddd-5941eff6d93c",
                "propertyDependencies": {
                    "apiVersion": null,
                    "data": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/role:Role::cluster-instanceRole-role",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-03516f97",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-e1b295bd",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:ServiceRole$aws:iam/rolePolicyAttachment:RolePolicyAttachment::cluster-instanceRole-3eb088f2"
                    ],
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:VpcCni::cluster-vpc-cni",
                "custom": true,
                "id": "e296c6412e6bcfcd",
                "type": "eks:index:VpcCni",
                "inputs": {
                    "kubeconfig": "{\"apiVersion\":\"v1\",\"clusters\":[{\"cluster\":{\"server\":\"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\",\"certificate-authority-data\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"},\"name\":\"kubernetes\"}],\"contexts\":[{\"context\":{\"cluster\":\"kubernetes\",\"user\":\"aws\"},\"name\":\"aws\"}],\"current-context\":\"aws\",\"kind\":\"Config\",\"users\":[{\"name\":\"aws\",\"user\":{\"exec\":{\"apiVersion\":\"client.authentication.k8s.io/v1alpha1\",\"command\":\"aws\",\"args\":[\"eks\",\"get-token\",\"--cluster-name\",\"cluster-eksCluster-697893c\"]}}}]}"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:eks::default::b6fc46ca-0a63-42a1-8bb4-2dab3ea3ec14",
                "propertyDependencies": {
                    "kubeconfig": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                    ]
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi-nodejs:dynamic:Resource::cluster-vpc-cni"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksClusterIngressRule",
                "custom": true,
                "id": "sgrule-372005069",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "description": "Allow pods to communicate with the cluster API Server",
                    "fromPort": 443,
                    "protocol": "tcp",
                    "securityGroupId": "sg-082aec91aad27a684",
                    "sourceSecurityGroupId": "sg-0a499e49f3d9a2dcc",
                    "toPort": 443,
                    "type": "ingress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "description": "Allow pods to communicate with the cluster API Server",
                    "fromPort": 443,
                    "id": "sgrule-372005069",
                    "protocol": "tcp",
                    "securityGroupId": "sg-082aec91aad27a684",
                    "self": false,
                    "sourceSecurityGroupId": "sg-0a499e49f3d9a2dcc",
                    "toPort": 443,
                    "type": "ingress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                    ],
                    "sourceSecurityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                    ],
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksNodeInternetEgressRule",
                "custom": true,
                "id": "sgrule-1337883841",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "cidrBlocks": [
                        "0.0.0.0/0"
                    ],
                    "description": "Allow internet access.",
                    "fromPort": 0,
                    "protocol": "-1",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "toPort": 0,
                    "type": "egress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "cidrBlocks": [
                        "0.0.0.0/0"
                    ],
                    "description": "Allow internet access.",
                    "fromPort": 0,
                    "id": "sgrule-1337883841",
                    "protocol": "-1",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "self": false,
                    "toPort": 0,
                    "type": "egress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "cidrBlocks": null,
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                    ],
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksExtApiServerClusterIngressRule",
                "custom": true,
                "id": "sgrule-4281068945",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "description": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane",
                    "fromPort": 443,
                    "protocol": "tcp",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "sourceSecurityGroupId": "sg-082aec91aad27a684",
                    "toPort": 443,
                    "type": "ingress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "description": "Allow pods running extension API servers on port 443 to receive communication from cluster control plane",
                    "fromPort": 443,
                    "id": "sgrule-4281068945",
                    "protocol": "tcp",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "self": false,
                    "sourceSecurityGroupId": "sg-082aec91aad27a684",
                    "toPort": 443,
                    "type": "ingress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                    ],
                    "sourceSecurityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                    ],
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksNodeIngressRule",
                "custom": true,
                "id": "sgrule-2859248915",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "description": "Allow nodes to communicate with each other",
                    "fromPort": 0,
                    "protocol": "-1",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "self": true,
                    "toPort": 0,
                    "type": "ingress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "description": "Allow nodes to communicate with each other",
                    "fromPort": 0,
                    "id": "sgrule-2859248915",
                    "protocol": "-1",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "self": true,
                    "toPort": 0,
                    "type": "ingress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                    ],
                    "self": null,
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksNodeClusterIngressRule",
                "custom": true,
                "id": "sgrule-2520353399",
                "type": "aws:ec2/securityGroupRule:SecurityGroupRule",
                "inputs": {
                    "__defaults": [],
                    "description": "Allow worker Kubelets and pods to receive communication from the cluster control plane",
                    "fromPort": 1025,
                    "protocol": "tcp",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "sourceSecurityGroupId": "sg-082aec91aad27a684",
                    "toPort": 65535,
                    "type": "ingress"
                },
                "outputs": {
                    "__meta": "{\"schema_version\":\"2\"}",
                    "description": "Allow worker Kubelets and pods to receive communication from the cluster control plane",
                    "fromPort": 1025,
                    "id": "sgrule-2520353399",
                    "protocol": "tcp",
                    "securityGroupId": "sg-0a499e49f3d9a2dcc",
                    "self": false,
                    "sourceSecurityGroupId": "sg-082aec91aad27a684",
                    "toPort": 65535,
                    "type": "ingress"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "description": null,
                    "fromPort": null,
                    "protocol": null,
                    "securityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup"
                    ],
                    "sourceSecurityGroupId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-eksClusterSecurityGroup"
                    ],
                    "toPort": null,
                    "type": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/launchConfiguration:LaunchConfiguration::cluster-nodeLaunchConfiguration",
                "custom": true,
                "id": "cluster-nodeLaunchConfiguration-1fc2c3e",
                "type": "aws:ec2/launchConfiguration:LaunchConfiguration",
                "inputs": {
                    "__defaults": [
                        "enableMonitoring",
                        "name"
                    ],
                    "associatePublicIpAddress": true,
                    "enableMonitoring": true,
                    "iamInstanceProfile": "cluster-instanceProfile-42aaea5",
                    "imageId": "ami-01d21a43f2988e305",
                    "instanceType": "t2.medium",
                    "name": "cluster-nodeLaunchConfiguration-1fc2c3e",
                    "rootBlockDevice": {
                        "__defaults": [],
                        "deleteOnTermination": true,
                        "volumeSize": 20,
                        "volumeType": "gp2"
                    },
                    "securityGroups": [
                        "sg-0a499e49f3d9a2dcc"
                    ],
                    "userData": "#!/bin/bash\n\n/etc/eks/bootstrap.sh --apiserver-endpoint \"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\" --b64-cluster-ca \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\" \"cluster-eksCluster-697893c\"\n\n/opt/aws/bin/cfn-signal --exit-code $? --stack cluster-de9819ff --resource NodeGroup --region eu-west-3\n"
                },
                "outputs": {
                    "arn": "arn:aws:autoscaling:eu-west-3:729026535377:launchConfiguration:1405bab5-7a7f-47df-99d9-0f86348d182d:launchConfigurationName/cluster-nodeLaunchConfiguration-1fc2c3e",
                    "associatePublicIpAddress": true,
                    "ebsBlockDevices": [],
                    "ebsOptimized": false,
                    "enableMonitoring": true,
                    "ephemeralBlockDevices": [],
                    "iamInstanceProfile": "cluster-instanceProfile-42aaea5",
                    "id": "cluster-nodeLaunchConfiguration-1fc2c3e",
                    "imageId": "ami-01d21a43f2988e305",
                    "instanceType": "t2.medium",
                    "keyName": "",
                    "metadataOptions": null,
                    "name": "cluster-nodeLaunchConfiguration-1fc2c3e",
                    "namePrefix": "",
                    "rootBlockDevice": {
                        "deleteOnTermination": true,
                        "encrypted": false,
                        "iops": 0,
                        "throughput": 0,
                        "volumeSize": 20,
                        "volumeType": "gp2"
                    },
                    "securityGroups": [
                        "sg-0a499e49f3d9a2dcc"
                    ],
                    "spotPrice": "",
                    "userData": "eee82264a3636534f118f16b647929a49f14f074",
                    "vpcClassicLinkId": "",
                    "vpcClassicLinkSecurityGroups": []
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:iam/instanceProfile:InstanceProfile::cluster-instanceProfile",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksClusterIngressRule",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:RandomSuffix::cluster-cfnStackName"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "associatePublicIpAddress": null,
                    "iamInstanceProfile": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:iam/instanceProfile:InstanceProfile::cluster-instanceProfile"
                    ],
                    "imageId": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster"
                    ],
                    "instanceType": null,
                    "rootBlockDevice": null,
                    "securityGroups": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroup:SecurityGroup::cluster-nodeSecurityGroup",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/securityGroupRule:SecurityGroupRule::cluster-eksClusterIngressRule"
                    ],
                    "userData": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:RandomSuffix::cluster-cfnStackName"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:cloudformation/stack:Stack::cluster-nodes",
                "custom": true,
                "id": "arn:aws:cloudformation:eu-west-3:729026535377:stack/cluster-de9819ff/13a4ef50-3d5a-11ec-90c4-0a258d985a18",
                "type": "aws:cloudformation/stack:Stack",
                "inputs": {
                    "__defaults": [],
                    "name": "cluster-de9819ff",
                    "tags": {
                        "Name": "cluster-nodes",
                        "__defaults": []
                    },
                    "templateBody": "\n                AWSTemplateFormatVersion: '2010-09-09'\n                Outputs:\n                    NodeGroup:\n                        Value: !Ref NodeGroup\n                Resources:\n                    NodeGroup:\n                        Type: AWS::AutoScaling::AutoScalingGroup\n                        Properties:\n                          DesiredCapacity: 2\n                          LaunchConfigurationName: cluster-nodeLaunchConfiguration-1fc2c3e\n                          MinSize: 1\n                          MaxSize: 2\n                          VPCZoneIdentifier: [\"subnet-0b81ca05f2c287927\",\"subnet-0baf5e7e749a9f05a\"]\n                          Tags:\n                          \n                          - Key: Name\n                            Value: cluster-eksCluster-697893c-worker\n                            PropagateAtLaunch: 'true'\n                          - Key: kubernetes.io/cluster/cluster-eksCluster-697893c\n                            Value: owned\n                            PropagateAtLaunch: 'true'\n                        UpdatePolicy:\n                          AutoScalingRollingUpdate:\n                            MinInstancesInService: '1'\n                            MaxBatchSize: '1'\n                "
                },
                "outputs": {
                    "__meta": "{\"e2bfb730-ecaa-11e6-8f88-34363bc7c4c0\":{\"create\":1800000000000,\"delete\":1800000000000,\"update\":1800000000000}}",
                    "disableRollback": false,
                    "iamRoleArn": "",
                    "id": "arn:aws:cloudformation:eu-west-3:729026535377:stack/cluster-de9819ff/13a4ef50-3d5a-11ec-90c4-0a258d985a18",
                    "name": "cluster-de9819ff",
                    "outputs": {
                        "NodeGroup": "cluster-de9819ff-NodeGroup-BCTU27AR6KXG"
                    },
                    "parameters": {},
                    "tags": {
                        "Name": "cluster-nodes"
                    },
                    "tagsAll": {
                        "Name": "cluster-nodes"
                    },
                    "templateBody": "\n                AWSTemplateFormatVersion: '2010-09-09'\n                Outputs:\n                    NodeGroup:\n                        Value: !Ref NodeGroup\n                Resources:\n                    NodeGroup:\n                        Type: AWS::AutoScaling::AutoScalingGroup\n                        Properties:\n                          DesiredCapacity: 2\n                          LaunchConfigurationName: cluster-nodeLaunchConfiguration-1fc2c3e\n                          MinSize: 1\n                          MaxSize: 2\n                          VPCZoneIdentifier: [\"subnet-0b81ca05f2c287927\",\"subnet-0baf5e7e749a9f05a\"]\n                          Tags:\n                          \n                          - Key: Name\n                            Value: cluster-eksCluster-697893c-worker\n                            PropagateAtLaunch: 'true'\n                          - Key: kubernetes.io/cluster/cluster-eksCluster-697893c\n                            Value: owned\n                            PropagateAtLaunch: 'true'\n                        UpdatePolicy:\n                          AutoScalingRollingUpdate:\n                            MinInstancesInService: '1'\n                            MaxBatchSize: '1'\n                "
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:VpcCni::cluster-vpc-cni",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$kubernetes:core/v1:ConfigMap::cluster-nodeAccess",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:RandomSuffix::cluster-cfnStackName",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/launchConfiguration:LaunchConfiguration::cluster-nodeLaunchConfiguration",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                    "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                ],
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::pulumi:providers:aws::default_4_25_0::1393b69f-77b4-4b76-8d0c-e44bd22225a8",
                "propertyDependencies": {
                    "name": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$eks:index:RandomSuffix::cluster-cfnStackName"
                    ],
                    "tags": null,
                    "templateBody": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:ec2/launchConfiguration:LaunchConfiguration::cluster-nodeLaunchConfiguration",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-0",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-0",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/subnet:Subnet::vpc-public-1",
                        "urn:pulumi:dev::test-04-foobar-on-eks::awsx:x:ec2:Vpc$awsx:x:ec2:Subnet$aws:ec2/routeTableAssociation:RouteTableAssociation::vpc-public-1"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider",
                "custom": true,
                "id": "517a7bec-9f32-4d64-bede-6185da1dee41",
                "type": "pulumi:providers:kubernetes",
                "inputs": {
                    "kubeconfig": "{\"apiVersion\":\"v1\",\"clusters\":[{\"cluster\":{\"server\":\"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\",\"certificate-authority-data\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"},\"name\":\"kubernetes\"}],\"contexts\":[{\"context\":{\"cluster\":\"kubernetes\",\"user\":\"aws\"},\"name\":\"aws\"}],\"current-context\":\"aws\",\"kind\":\"Config\",\"users\":[{\"name\":\"aws\",\"user\":{\"exec\":{\"apiVersion\":\"client.authentication.k8s.io/v1alpha1\",\"command\":\"aws\",\"args\":[\"eks\",\"get-token\",\"--cluster-name\",\"cluster-eksCluster-697893c\"]}}}]}",
                    "version": "3.8.3"
                },
                "outputs": {
                    "kubeconfig": "{\"apiVersion\":\"v1\",\"clusters\":[{\"cluster\":{\"server\":\"https://3DFC3D23A9F64CB49E96331CC5E4A68D.yl4.eu-west-3.eks.amazonaws.com\",\"certificate-authority-data\":\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeE1URXdOREV3TWpVeE9Wb1hEVE14TVRFd01qRXdNalV4T1Zvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTysxCnJNL0E0TkdhekFqeEl4SWl0MUF0MUJVSjVKeWdkUWd1MENkdHJYUFlveVFuK1Q4RXY5cWxxV3JaWEMxNlUwRGoKVGUzOWdqTXZKT3lDZHJVTjAvalJPdXdwKyt6M3pvRmFobXZKNUo3ZHpjSlFuemlaVm5PUnhuWjBDYnpQRm95VwphNlovdGFVWk1nQk1GZ3d2TUcxK2tycGNhbmx5ZmplYk1DdkRQS0dMOGJQR1BRT3FUWCswL3Z3SVIwNzhNbGdnCjBHd1E0Qm5GZndPSXl0VFI0Ym1KT0pxQjRoM202NVJyK2dKQUlTaFlRNU9HenlXQUlEMTNNbW5Lbkg0Mjg5aEIKV05LM0M2ZEhBaGhyZWdscTJyRUlvV1FEUUlwRHJ6K3Nwb1pRTjBwTlpNd2JTUE04b0ZZdzFqd2NuSk5wMnpwNgpWZUF5YlYvYkp6cDhIcERKM21VQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZIcDJteStTbmhrd20rOWR1NTRzVEtER2gvZ1FNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFBL2RVbjVaT2k0OVAwVFpod1BJNVlCYWMxUzNHRjNVTjJYbjRDN3I5UDUzc0xkcnRpSQp6YmN1VDVvTHkxa0xZL1FFeFBMRTFYOW1LRGJIOHRZeUFPcVlnSVhzNnJFUlFMVGhvMHF1U09uNy9jYUNXZWxLCmtCKytacHhYQ2xBck40YTZJN0FRU3YvUzBRVUE0YjdHTmJidDBBMjJKV3BFMlM3b0V4TFhWZHhYT0g5d1hSL2UKMEpaQmxLU0VkZS9wWlM4Unl5MStDL3RFcldtZUlqaEFVZk9sd3FXL2J2ZTdUeE5pa1JnanBnQWIzRDhXZmVrbQp6MThxeUY4cTlqYTdsNDh0c0lnQjh2VWZTcUhyUVgzZXBmMmF5bDVQdVFsbXNROU9heUx4SnZ1cUpycUhOd0IzCllQNURJYXBtSDM2aEhKbC82ajdlWVM1TDFkRXpTb0lEdFZyeQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"},\"name\":\"kubernetes\"}],\"contexts\":[{\"context\":{\"cluster\":\"kubernetes\",\"user\":\"aws\"},\"name\":\"aws\"}],\"current-context\":\"aws\",\"kind\":\"Config\",\"users\":[{\"name\":\"aws\",\"user\":{\"exec\":{\"apiVersion\":\"client.authentication.k8s.io/v1alpha1\",\"command\":\"aws\",\"args\":[\"eks\",\"get-token\",\"--cluster-name\",\"cluster-eksCluster-697893c\"]}}}]}",
                    "version": "3.8.3"
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster::cluster",
                "dependencies": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                    "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:cloudformation/stack:Stack::cluster-nodes"
                ],
                "propertyDependencies": {
                    "kubeconfig": [
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:eks/cluster:Cluster::cluster-eksCluster",
                        "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$aws:cloudformation/stack:Stack::cluster-nodes"
                    ]
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-clusterissuers",
                "custom": true,
                "id": "cert-manager-controller-clusterissuers",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-clusterissuers"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-clusterissuers"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-clusterissuers"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-clusterissuers"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-clusterissuers\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-clusterissuers\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:39Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:39Z"
                            }
                        ],
                        "name": "cert-manager-controller-clusterissuers",
                        "resourceVersion": "916",
                        "uid": "d517bc86-8b87-4217-99b3-7a45f3919e3c"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-clusterissuers"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-clusterissuers",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-clusterissuers"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration::cert-manager-webhook",
                "custom": true,
                "id": "cert-manager-webhook",
                "type": "kubernetes:admissionregistration.k8s.io/v1:MutatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                        },
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1",
                                "v1beta1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "cert-manager-webhook",
                                    "namespace": "cert-manager",
                                    "path": "/mutate"
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.cert-manager.io",
                            "rules": [
                                {
                                    "apiGroups": [
                                        "cert-manager.io",
                                        "acme.cert-manager.io"
                                    ],
                                    "apiVersions": [
                                        "v1"
                                    ],
                                    "operations": [
                                        "CREATE",
                                        "UPDATE"
                                    ],
                                    "resources": [
                                        "*/*"
                                    ]
                                }
                            ],
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "MutatingWebhookConfiguration",
                        "metadata": {
                            "annotations": {
                                "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                            },
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/mutate"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "matchPolicy": "Equivalent",
                                "name": "webhook.cert-manager.io",
                                "rules": [
                                    {
                                        "apiGroups": [
                                            "cert-manager.io",
                                            "acme.cert-manager.io"
                                        ],
                                        "apiVersions": [
                                            "v1"
                                        ],
                                        "operations": [
                                            "CREATE",
                                            "UPDATE"
                                        ],
                                        "resources": [
                                            "*/*"
                                        ]
                                    }
                                ],
                                "sideEffects": "None",
                                "timeoutSeconds": 10
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "MutatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"MutatingWebhookConfiguration\",\"metadata\":{\"annotations\":{\"cert-manager.io/inject-ca-from-secret\":\"cert-manager/cert-manager-webhook-ca\"},\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1\",\"v1beta1\"],\"clientConfig\":{\"service\":{\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\",\"path\":\"/mutate\"}},\"failurePolicy\":\"Fail\",\"matchPolicy\":\"Equivalent\",\"name\":\"webhook.cert-manager.io\",\"rules\":[{\"apiGroups\":[\"cert-manager.io\",\"acme.cert-manager.io\"],\"apiVersions\":[\"v1\"],\"operations\":[\"CREATE\",\"UPDATE\"],\"resources\":[\"*/*\"]}],\"sideEffects\":\"None\",\"timeoutSeconds\":10}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:42Z",
                        "generation": 1,
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:cert-manager.io/inject-ca-from-secret": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"webhook.cert-manager.io\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:path": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:reinvocationPolicy": {},
                                            "f:rules": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:42Z"
                            }
                        ],
                        "name": "cert-manager-webhook",
                        "resourceVersion": "921",
                        "uid": "a26b94f9-45fc-4297-987c-df5d44c57a68"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1",
                                "v1beta1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "cert-manager-webhook",
                                    "namespace": "cert-manager",
                                    "path": "/mutate",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.cert-manager.io",
                            "namespaceSelector": {},
                            "objectSelector": {},
                            "reinvocationPolicy": "Never",
                            "rules": [
                                {
                                    "apiGroups": [
                                        "cert-manager.io",
                                        "acme.cert-manager.io"
                                    ],
                                    "apiVersions": [
                                        "v1"
                                    ],
                                    "operations": [
                                        "CREATE",
                                        "UPDATE"
                                    ],
                                    "resources": [
                                        "*/*"
                                    ],
                                    "scope": "*"
                                }
                            ],
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "webhooks": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:admissionregistration.k8s.io/v1beta1:MutatingWebhookConfiguration::cert-manager-webhook"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration::cert-manager-webhook",
                "custom": true,
                "id": "cert-manager-webhook",
                "type": "kubernetes:admissionregistration.k8s.io/v1:ValidatingWebhookConfiguration",
                "inputs": {
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                        },
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1",
                                "v1beta1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "cert-manager-webhook",
                                    "namespace": "cert-manager",
                                    "path": "/validate"
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.cert-manager.io",
                            "namespaceSelector": {
                                "matchExpressions": [
                                    {
                                        "key": "cert-manager.io/disable-validation",
                                        "operator": "NotIn",
                                        "values": [
                                            "true"
                                        ]
                                    },
                                    {
                                        "key": "name",
                                        "operator": "NotIn",
                                        "values": [
                                            "cert-manager"
                                        ]
                                    }
                                ]
                            },
                            "rules": [
                                {
                                    "apiGroups": [
                                        "cert-manager.io",
                                        "acme.cert-manager.io"
                                    ],
                                    "apiVersions": [
                                        "v1"
                                    ],
                                    "operations": [
                                        "CREATE",
                                        "UPDATE"
                                    ],
                                    "resources": [
                                        "*/*"
                                    ]
                                }
                            ],
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "admissionregistration.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "admissionregistration.k8s.io/v1",
                        "kind": "ValidatingWebhookConfiguration",
                        "metadata": {
                            "annotations": {
                                "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                            },
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook"
                        },
                        "webhooks": [
                            {
                                "admissionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ],
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/validate"
                                    }
                                },
                                "failurePolicy": "Fail",
                                "matchPolicy": "Equivalent",
                                "name": "webhook.cert-manager.io",
                                "namespaceSelector": {
                                    "matchExpressions": [
                                        {
                                            "key": "cert-manager.io/disable-validation",
                                            "operator": "NotIn",
                                            "values": [
                                                "true"
                                            ]
                                        },
                                        {
                                            "key": "name",
                                            "operator": "NotIn",
                                            "values": [
                                                "cert-manager"
                                            ]
                                        }
                                    ]
                                },
                                "rules": [
                                    {
                                        "apiGroups": [
                                            "cert-manager.io",
                                            "acme.cert-manager.io"
                                        ],
                                        "apiVersions": [
                                            "v1"
                                        ],
                                        "operations": [
                                            "CREATE",
                                            "UPDATE"
                                        ],
                                        "resources": [
                                            "*/*"
                                        ]
                                    }
                                ],
                                "sideEffects": "None",
                                "timeoutSeconds": 10
                            }
                        ]
                    },
                    "apiVersion": "admissionregistration.k8s.io/v1",
                    "kind": "ValidatingWebhookConfiguration",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"admissionregistration.k8s.io/v1\",\"kind\":\"ValidatingWebhookConfiguration\",\"metadata\":{\"annotations\":{\"cert-manager.io/inject-ca-from-secret\":\"cert-manager/cert-manager-webhook-ca\"},\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook\"},\"webhooks\":[{\"admissionReviewVersions\":[\"v1\",\"v1beta1\"],\"clientConfig\":{\"service\":{\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\",\"path\":\"/validate\"}},\"failurePolicy\":\"Fail\",\"matchPolicy\":\"Equivalent\",\"name\":\"webhook.cert-manager.io\",\"namespaceSelector\":{\"matchExpressions\":[{\"key\":\"cert-manager.io/disable-validation\",\"operator\":\"NotIn\",\"values\":[\"true\"]},{\"key\":\"name\",\"operator\":\"NotIn\",\"values\":[\"cert-manager\"]}]},\"rules\":[{\"apiGroups\":[\"cert-manager.io\",\"acme.cert-manager.io\"],\"apiVersions\":[\"v1\"],\"operations\":[\"CREATE\",\"UPDATE\"],\"resources\":[\"*/*\"]}],\"sideEffects\":\"None\",\"timeoutSeconds\":10}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:42Z",
                        "generation": 1,
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "admissionregistration.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:cert-manager.io/inject-ca-from-secret": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:webhooks": {
                                        ".": {},
                                        "k:{\"name\":\"webhook.cert-manager.io\"}": {
                                            ".": {},
                                            "f:admissionReviewVersions": {},
                                            "f:clientConfig": {
                                                ".": {},
                                                "f:service": {
                                                    ".": {},
                                                    "f:name": {},
                                                    "f:namespace": {},
                                                    "f:path": {},
                                                    "f:port": {}
                                                }
                                            },
                                            "f:failurePolicy": {},
                                            "f:matchPolicy": {},
                                            "f:name": {},
                                            "f:namespaceSelector": {},
                                            "f:objectSelector": {},
                                            "f:rules": {},
                                            "f:sideEffects": {},
                                            "f:timeoutSeconds": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:42Z"
                            }
                        ],
                        "name": "cert-manager-webhook",
                        "resourceVersion": "923",
                        "uid": "17a9606f-1c49-4b99-8a86-9d01c46a8dd1"
                    },
                    "webhooks": [
                        {
                            "admissionReviewVersions": [
                                "v1",
                                "v1beta1"
                            ],
                            "clientConfig": {
                                "service": {
                                    "name": "cert-manager-webhook",
                                    "namespace": "cert-manager",
                                    "path": "/validate",
                                    "port": 443
                                }
                            },
                            "failurePolicy": "Fail",
                            "matchPolicy": "Equivalent",
                            "name": "webhook.cert-manager.io",
                            "namespaceSelector": {
                                "matchExpressions": [
                                    {
                                        "key": "cert-manager.io/disable-validation",
                                        "operator": "NotIn",
                                        "values": [
                                            "true"
                                        ]
                                    },
                                    {
                                        "key": "name",
                                        "operator": "NotIn",
                                        "values": [
                                            "cert-manager"
                                        ]
                                    }
                                ]
                            },
                            "objectSelector": {},
                            "rules": [
                                {
                                    "apiGroups": [
                                        "cert-manager.io",
                                        "acme.cert-manager.io"
                                    ],
                                    "apiVersions": [
                                        "v1"
                                    ],
                                    "operations": [
                                        "CREATE",
                                        "UPDATE"
                                    ],
                                    "resources": [
                                        "*/*"
                                    ],
                                    "scope": "*"
                                }
                            ],
                            "sideEffects": "None",
                            "timeoutSeconds": 10
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "webhooks": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:admissionregistration.k8s.io/v1beta1:ValidatingWebhookConfiguration::cert-manager-webhook"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::kube-system/cert-manager-cainjector:leaderelection",
                "custom": true,
                "id": "kube-system/cert-manager-cainjector:leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-cainjector:leaderelection",
                        "namespace": "kube-system"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-cainjector-leader-election",
                                "cert-manager-cainjector-leader-election-core"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resourceNames": [
                                "cert-manager-cainjector-leader-election",
                                "cert-manager-cainjector-leader-election-core"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app": "cainjector",
                                "app.kubernetes.io/component": "cainjector",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cainjector",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-cainjector:leaderelection",
                            "namespace": "kube-system"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "cert-manager-cainjector-leader-election",
                                    "cert-manager-cainjector-leader-election-core"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resourceNames": [
                                    "cert-manager-cainjector-leader-election",
                                    "cert-manager-cainjector-leader-election-core"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-cainjector:leaderelection\",\"namespace\":\"kube-system\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"cert-manager-cainjector-leader-election\",\"cert-manager-cainjector-leader-election-core\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\",\"update\",\"patch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"create\"]},{\"apiGroups\":[\"coordination.k8s.io\"],\"resourceNames\":[\"cert-manager-cainjector-leader-election\",\"cert-manager-cainjector-leader-election-core\"],\"resources\":[\"leases\"],\"verbs\":[\"get\",\"update\",\"patch\"]},{\"apiGroups\":[\"coordination.k8s.io\"],\"resources\":[\"leases\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:43Z",
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:43Z"
                            }
                        ],
                        "name": "cert-manager-cainjector:leaderelection",
                        "namespace": "kube-system",
                        "resourceVersion": "927",
                        "uid": "98ff78a8-4ad6-4c5d-8160-b8d8cbcdb8b3"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-cainjector-leader-election",
                                "cert-manager-cainjector-leader-election-core"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resourceNames": [
                                "cert-manager-cainjector-leader-election",
                                "cert-manager-cainjector-leader-election-core"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:Role::kube-system/cert-manager-cainjector:leaderelection",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:Role::kube-system/cert-manager-cainjector:leaderelection"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-approve:cert-manager-io",
                "custom": true,
                "id": "cert-manager-controller-approve:cert-manager-io",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-approve:cert-manager-io"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-approve:cert-manager-io"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-approve:cert-manager-io"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-approve:cert-manager-io"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-approve:cert-manager-io\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-approve:cert-manager-io\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:44Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:44Z"
                            }
                        ],
                        "name": "cert-manager-controller-approve:cert-manager-io",
                        "resourceVersion": "929",
                        "uid": "151d1b89-28c0-4086-a509-86056f951ac7"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-approve:cert-manager-io"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-approve:cert-manager-io",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-approve:cert-manager-io"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::kube-system/cert-manager:leaderelection",
                "custom": true,
                "id": "kube-system/cert-manager:leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager:leaderelection",
                        "namespace": "kube-system"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-controller"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resourceNames": [
                                "cert-manager-controller"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager:leaderelection",
                            "namespace": "kube-system"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "cert-manager-controller"
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "configmaps"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resourceNames": [
                                    "cert-manager-controller"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "get",
                                    "update",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "coordination.k8s.io"
                                ],
                                "resources": [
                                    "leases"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager:leaderelection\",\"namespace\":\"kube-system\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"cert-manager-controller\"],\"resources\":[\"configmaps\"],\"verbs\":[\"get\",\"update\",\"patch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"configmaps\"],\"verbs\":[\"create\"]},{\"apiGroups\":[\"coordination.k8s.io\"],\"resourceNames\":[\"cert-manager-controller\"],\"resources\":[\"leases\"],\"verbs\":[\"get\",\"update\",\"patch\"]},{\"apiGroups\":[\"coordination.k8s.io\"],\"resources\":[\"leases\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:45Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:45Z"
                            }
                        ],
                        "name": "cert-manager:leaderelection",
                        "namespace": "kube-system",
                        "resourceVersion": "932",
                        "uid": "83c8554b-c786-4bae-8ebc-00bd2d83cb36"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-controller"
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "configmaps"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resourceNames": [
                                "cert-manager-controller"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "get",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "coordination.k8s.io"
                            ],
                            "resources": [
                                "leases"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:Role::kube-system/cert-manager:leaderelection",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:Role::kube-system/cert-manager:leaderelection"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-ingress-shim",
                "custom": true,
                "id": "cert-manager-controller-ingress-shim",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-ingress-shim"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-ingress-shim"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-ingress-shim"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-ingress-shim"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-ingress-shim\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-ingress-shim\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:45Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:45Z"
                            }
                        ],
                        "name": "cert-manager-controller-ingress-shim",
                        "resourceVersion": "934",
                        "uid": "f6ed635f-4993-4fe7-af4b-d2e86a2cc217"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-ingress-shim"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-ingress-shim",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-ingress-shim"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-cainjector",
                "custom": true,
                "id": "cert-manager-cainjector",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-cainjector"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-cainjector"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-cainjector",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cainjector",
                                "app.kubernetes.io/component": "cainjector",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cainjector",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-cainjector"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-cainjector"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager-cainjector",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-cainjector\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-cainjector\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager-cainjector\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:46Z",
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:46Z"
                            }
                        ],
                        "name": "cert-manager-cainjector",
                        "resourceVersion": "936",
                        "uid": "2ae659d8-8f5a-4847-9784-0879707bc01d"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-cainjector"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-cainjector",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-cainjector",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-cainjector"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-challenges",
                "custom": true,
                "id": "cert-manager-controller-challenges",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-challenges"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "challenges/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers",
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "services"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "httproutes"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "route.openshift.io"
                            ],
                            "resources": [
                                "routes/custom-host"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-challenges"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges",
                                    "challenges/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "issuers",
                                    "clusterissuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "pods",
                                    "services"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "delete",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.x-k8s.io"
                                ],
                                "resources": [
                                    "httproutes"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "delete",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "route.openshift.io"
                                ],
                                "resources": [
                                    "routes/custom-host"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-challenges\"},\"rules\":[{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges\",\"challenges/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"issuers\",\"clusterissuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"pods\",\"services\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\"]},{\"apiGroups\":[\"networking.k8s.io\"],\"resources\":[\"ingresses\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"update\"]},{\"apiGroups\":[\"networking.x-k8s.io\"],\"resources\":[\"httproutes\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"delete\",\"update\"]},{\"apiGroups\":[\"route.openshift.io\"],\"resources\":[\"routes/custom-host\"],\"verbs\":[\"create\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges/finalizers\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:47Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:47Z"
                            }
                        ],
                        "name": "cert-manager-controller-challenges",
                        "resourceVersion": "942",
                        "uid": "a13e94d5-8869-470e-8df6-77d7c693bb60"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "challenges/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers",
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "pods",
                                "services"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "httproutes"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "delete",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "route.openshift.io"
                            ],
                            "resources": [
                                "routes/custom-host"
                            ],
                            "verbs": [
                                "create"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-challenges",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-challenges"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-ingress-shim",
                "custom": true,
                "id": "cert-manager-controller-ingress-shim",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-ingress-shim"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers",
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "gateways",
                                "httproutes"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "gateways/finalizers",
                                "httproutes/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-ingress-shim"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificaterequests"
                                ],
                                "verbs": [
                                    "create",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificaterequests",
                                    "issuers",
                                    "clusterissuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.k8s.io"
                                ],
                                "resources": [
                                    "ingresses/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.x-k8s.io"
                                ],
                                "resources": [
                                    "gateways",
                                    "httproutes"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "networking.x-k8s.io"
                                ],
                                "resources": [
                                    "gateways/finalizers",
                                    "httproutes/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-ingress-shim\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificaterequests\"],\"verbs\":[\"create\",\"update\",\"delete\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificaterequests\",\"issuers\",\"clusterissuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"networking.k8s.io\"],\"resources\":[\"ingresses\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"networking.k8s.io\"],\"resources\":[\"ingresses/finalizers\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"networking.x-k8s.io\"],\"resources\":[\"gateways\",\"httproutes\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"networking.x-k8s.io\"],\"resources\":[\"gateways/finalizers\",\"httproutes/finalizers\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:48Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:48Z"
                            }
                        ],
                        "name": "cert-manager-controller-ingress-shim",
                        "resourceVersion": "943",
                        "uid": "b5d2e949-c506-46a9-a5f4-15eaef0b1844"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests"
                            ],
                            "verbs": [
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers",
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.k8s.io"
                            ],
                            "resources": [
                                "ingresses/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "gateways",
                                "httproutes"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "networking.x-k8s.io"
                            ],
                            "resources": [
                                "gateways/finalizers",
                                "httproutes/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-ingress-shim",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-ingress-shim"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-webhook:subjectaccessreviews",
                "custom": true,
                "id": "cert-manager-webhook:subjectaccessreviews",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook:subjectaccessreviews"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-webhook:subjectaccessreviews"
                    },
                    "subjects": [
                        {
                            "apiGroup": "",
                            "kind": "ServiceAccount",
                            "name": "cert-manager-webhook",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook:subjectaccessreviews"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-webhook:subjectaccessreviews"
                        },
                        "subjects": [
                            {
                                "apiGroup": "",
                                "kind": "ServiceAccount",
                                "name": "cert-manager-webhook",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook:subjectaccessreviews\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-webhook:subjectaccessreviews\"},\"subjects\":[{\"apiGroup\":\"\",\"kind\":\"ServiceAccount\",\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:49Z",
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:49Z"
                            }
                        ],
                        "name": "cert-manager-webhook:subjectaccessreviews",
                        "resourceVersion": "947",
                        "uid": "129c0f80-4683-43e7-bfa5-26928cfe65e1"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-webhook:subjectaccessreviews"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-webhook",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-webhook:subjectaccessreviews",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-webhook:subjectaccessreviews"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::kube-system/cert-manager-cainjector:leaderelection",
                "custom": true,
                "id": "kube-system/cert-manager-cainjector:leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-cainjector:leaderelection",
                        "namespace": "kube-system"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager-cainjector:leaderelection"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-cainjector",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cainjector",
                                "app.kubernetes.io/component": "cainjector",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cainjector",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-cainjector:leaderelection",
                            "namespace": "kube-system"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "cert-manager-cainjector:leaderelection"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager-cainjector",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-cainjector:leaderelection\",\"namespace\":\"kube-system\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"cert-manager-cainjector:leaderelection\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager-cainjector\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:50Z",
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:50Z"
                            }
                        ],
                        "name": "cert-manager-cainjector:leaderelection",
                        "namespace": "kube-system",
                        "resourceVersion": "949",
                        "uid": "f3aa03ec-6d36-4cad-b62b-42f070472890"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager-cainjector:leaderelection"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-cainjector",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding::kube-system/cert-manager-cainjector:leaderelection",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding::kube-system/cert-manager-cainjector:leaderelection"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-cainjector",
                "custom": true,
                "id": "cert-manager-cainjector",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-cainjector"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "get",
                                "create",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "validatingwebhookconfigurations",
                                "mutatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apiregistration.k8s.io"
                            ],
                            "resources": [
                                "apiservices"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "auditregistration.k8s.io"
                            ],
                            "resources": [
                                "auditsinks"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cainjector",
                                "app.kubernetes.io/component": "cainjector",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cainjector",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-cainjector"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "get",
                                    "create",
                                    "update",
                                    "patch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "admissionregistration.k8s.io"
                                ],
                                "resources": [
                                    "validatingwebhookconfigurations",
                                    "mutatingwebhookconfigurations"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "apiregistration.k8s.io"
                                ],
                                "resources": [
                                    "apiservices"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "apiextensions.k8s.io"
                                ],
                                "resources": [
                                    "customresourcedefinitions"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "auditregistration.k8s.io"
                                ],
                                "resources": [
                                    "auditsinks"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cainjector\",\"app.kubernetes.io/component\":\"cainjector\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cainjector\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-cainjector\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"get\",\"create\",\"update\",\"patch\"]},{\"apiGroups\":[\"admissionregistration.k8s.io\"],\"resources\":[\"validatingwebhookconfigurations\",\"mutatingwebhookconfigurations\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]},{\"apiGroups\":[\"apiregistration.k8s.io\"],\"resources\":[\"apiservices\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]},{\"apiGroups\":[\"apiextensions.k8s.io\"],\"resources\":[\"customresourcedefinitions\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]},{\"apiGroups\":[\"auditregistration.k8s.io\"],\"resources\":[\"auditsinks\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:50Z",
                        "labels": {
                            "app": "cainjector",
                            "app.kubernetes.io/component": "cainjector",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cainjector",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:50Z"
                            }
                        ],
                        "name": "cert-manager-cainjector",
                        "resourceVersion": "950",
                        "uid": "587dff11-2835-4e5f-870d-9dde7e3afea4"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "get",
                                "create",
                                "update",
                                "patch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "admissionregistration.k8s.io"
                            ],
                            "resources": [
                                "validatingwebhookconfigurations",
                                "mutatingwebhookconfigurations"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apiregistration.k8s.io"
                            ],
                            "resources": [
                                "apiservices"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "apiextensions.k8s.io"
                            ],
                            "resources": [
                                "customresourcedefinitions"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "auditregistration.k8s.io"
                            ],
                            "resources": [
                                "auditsinks"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-cainjector",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-cainjector"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-certificates",
                "custom": true,
                "id": "cert-manager-controller-certificates",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-certificates"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-certificates"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-certificates"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-certificates"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-certificates\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-certificates\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:51Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:51Z"
                            }
                        ],
                        "name": "cert-manager-controller-certificates",
                        "resourceVersion": "953",
                        "uid": "0ab93fd4-f33b-4d28-931f-dced53d56898"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-certificates"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-certificates",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-certificates"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-view",
                "custom": true,
                "id": "cert-manager-view",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "name": "cert-manager-view"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "orders"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1",
                                "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                                "rbac.authorization.k8s.io/aggregate-to-edit": "true",
                                "rbac.authorization.k8s.io/aggregate-to-view": "true"
                            },
                            "name": "cert-manager-view"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificaterequests",
                                    "issuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges",
                                    "orders"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\",\"rbac.authorization.k8s.io/aggregate-to-admin\":\"true\",\"rbac.authorization.k8s.io/aggregate-to-edit\":\"true\",\"rbac.authorization.k8s.io/aggregate-to-view\":\"true\"},\"name\":\"cert-manager-view\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificaterequests\",\"issuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges\",\"orders\"],\"verbs\":[\"get\",\"list\",\"watch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:52Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true",
                            "rbac.authorization.k8s.io/aggregate-to-view": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-admin": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-edit": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-view": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:52Z"
                            }
                        ],
                        "name": "cert-manager-view",
                        "resourceVersion": "959",
                        "uid": "d5414e11-dea3-49bf-8216-318d03e5cd1d"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "orders"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-view",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-view"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-edit",
                "custom": true,
                "id": "cert-manager-edit",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "name": "cert-manager-edit"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "patch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "orders"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "patch",
                                "update"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1",
                                "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                                "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                            },
                            "name": "cert-manager-edit"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificaterequests",
                                    "issuers"
                                ],
                                "verbs": [
                                    "create",
                                    "delete",
                                    "deletecollection",
                                    "patch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges",
                                    "orders"
                                ],
                                "verbs": [
                                    "create",
                                    "delete",
                                    "deletecollection",
                                    "patch",
                                    "update"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\",\"rbac.authorization.k8s.io/aggregate-to-admin\":\"true\",\"rbac.authorization.k8s.io/aggregate-to-edit\":\"true\"},\"name\":\"cert-manager-edit\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificaterequests\",\"issuers\"],\"verbs\":[\"create\",\"delete\",\"deletecollection\",\"patch\",\"update\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges\",\"orders\"],\"verbs\":[\"create\",\"delete\",\"deletecollection\",\"patch\",\"update\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:53Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1",
                            "rbac.authorization.k8s.io/aggregate-to-admin": "true",
                            "rbac.authorization.k8s.io/aggregate-to-edit": "true"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-admin": {},
                                            "f:rbac.authorization.k8s.io/aggregate-to-edit": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:53Z"
                            }
                        ],
                        "name": "cert-manager-edit",
                        "resourceVersion": "967",
                        "uid": "d2fd84e4-c7bc-4b57-be2d-ca089bd0fe46"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "issuers"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "patch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges",
                                "orders"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "deletecollection",
                                "patch",
                                "update"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-edit",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-edit"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-issuers",
                "custom": true,
                "id": "cert-manager-controller-issuers",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-issuers"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers",
                                "issuers/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-issuers"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "issuers",
                                    "issuers/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "issuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-issuers\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"issuers\",\"issuers/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"issuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"update\",\"delete\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:55Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:55Z"
                            }
                        ],
                        "name": "cert-manager-controller-issuers",
                        "resourceVersion": "971",
                        "uid": "e90574df-86cb-41c9-9524-58d5acceabbc"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers",
                                "issuers/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-issuers",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-issuers"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-certificatesigningrequests",
                "custom": true,
                "id": "cert-manager-controller-certificatesigningrequests",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-certificatesigningrequests"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resources": [
                                "certificatesigningrequests"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resources": [
                                "certificatesigningrequests/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resourceNames": [
                                "issuers.cert-manager.io/*",
                                "clusterissuers.cert-manager.io/*"
                            ],
                            "resources": [
                                "signers"
                            ],
                            "verbs": [
                                "sign"
                            ]
                        },
                        {
                            "apiGroups": [
                                "authorization.k8s.io"
                            ],
                            "resources": [
                                "subjectaccessreviews"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-certificatesigningrequests"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "certificates.k8s.io"
                                ],
                                "resources": [
                                    "certificatesigningrequests"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "certificates.k8s.io"
                                ],
                                "resources": [
                                    "certificatesigningrequests/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "certificates.k8s.io"
                                ],
                                "resourceNames": [
                                    "issuers.cert-manager.io/*",
                                    "clusterissuers.cert-manager.io/*"
                                ],
                                "resources": [
                                    "signers"
                                ],
                                "verbs": [
                                    "sign"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "authorization.k8s.io"
                                ],
                                "resources": [
                                    "subjectaccessreviews"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-certificatesigningrequests\"},\"rules\":[{\"apiGroups\":[\"certificates.k8s.io\"],\"resources\":[\"certificatesigningrequests\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]},{\"apiGroups\":[\"certificates.k8s.io\"],\"resources\":[\"certificatesigningrequests/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"certificates.k8s.io\"],\"resourceNames\":[\"issuers.cert-manager.io/*\",\"clusterissuers.cert-manager.io/*\"],\"resources\":[\"signers\"],\"verbs\":[\"sign\"]},{\"apiGroups\":[\"authorization.k8s.io\"],\"resources\":[\"subjectaccessreviews\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:56Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:56Z"
                            }
                        ],
                        "name": "cert-manager-controller-certificatesigningrequests",
                        "resourceVersion": "976",
                        "uid": "c1364ce7-dae8-4121-ba70-d46b886ddb31"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resources": [
                                "certificatesigningrequests"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resources": [
                                "certificatesigningrequests/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "certificates.k8s.io"
                            ],
                            "resourceNames": [
                                "issuers.cert-manager.io/*",
                                "clusterissuers.cert-manager.io/*"
                            ],
                            "resources": [
                                "signers"
                            ],
                            "verbs": [
                                "sign"
                            ]
                        },
                        {
                            "apiGroups": [
                                "authorization.k8s.io"
                            ],
                            "resources": [
                                "subjectaccessreviews"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-certificatesigningrequests",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-certificatesigningrequests"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-clusterissuers",
                "custom": true,
                "id": "cert-manager-controller-clusterissuers",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-clusterissuers"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers",
                                "clusterissuers/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-clusterissuers"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "clusterissuers",
                                    "clusterissuers/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "clusterissuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-clusterissuers\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"clusterissuers\",\"clusterissuers/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"clusterissuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"update\",\"delete\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:57Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:57Z"
                            }
                        ],
                        "name": "cert-manager-controller-clusterissuers",
                        "resourceVersion": "983",
                        "uid": "2d4d903c-9dec-45cf-b955-54727dd18f54"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers",
                                "clusterissuers/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-clusterissuers",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-clusterissuers"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-certificates",
                "custom": true,
                "id": "cert-manager-controller-certificates",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-certificates"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificates/status",
                                "certificaterequests",
                                "certificaterequests/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "clusterissuers",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates/finalizers",
                                "certificaterequests/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-certificates"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificates/status",
                                    "certificaterequests",
                                    "certificaterequests/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates",
                                    "certificaterequests",
                                    "clusterissuers",
                                    "issuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "certificates/finalizers",
                                    "certificaterequests/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "orders"
                                ],
                                "verbs": [
                                    "create",
                                    "delete",
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "create",
                                    "update",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-certificates\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificates/status\",\"certificaterequests\",\"certificaterequests/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates\",\"certificaterequests\",\"clusterissuers\",\"issuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"certificates/finalizers\",\"certificaterequests/finalizers\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"orders\"],\"verbs\":[\"create\",\"delete\",\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\",\"create\",\"update\",\"delete\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:30:59Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:30:59Z"
                            }
                        ],
                        "name": "cert-manager-controller-certificates",
                        "resourceVersion": "994",
                        "uid": "189138e2-2e76-4c30-8e27-be566cae3b0d"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificates/status",
                                "certificaterequests",
                                "certificaterequests/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates",
                                "certificaterequests",
                                "clusterissuers",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "certificates/finalizers",
                                "certificaterequests/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders"
                            ],
                            "verbs": [
                                "create",
                                "delete",
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "create",
                                "update",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-certificates",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-certificates"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-certificatesigningrequests",
                "custom": true,
                "id": "cert-manager-controller-certificatesigningrequests",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-certificatesigningrequests"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-certificatesigningrequests"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-certificatesigningrequests"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-certificatesigningrequests"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-certificatesigningrequests\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-certificatesigningrequests\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:00Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:00Z"
                            }
                        ],
                        "name": "cert-manager-controller-certificatesigningrequests",
                        "resourceVersion": "997",
                        "uid": "b7965b5c-3a02-4352-98ac-dcfe3cb8f3e9"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-certificatesigningrequests"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-certificatesigningrequests",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-certificatesigningrequests"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-orders",
                "custom": true,
                "id": "cert-manager-controller-orders",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-orders"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders",
                                "orders/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders",
                                "challenges"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges"
                            ],
                            "verbs": [
                                "create",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-orders"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "orders",
                                    "orders/status"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "orders",
                                    "challenges"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resources": [
                                    "clusterissuers",
                                    "issuers"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "challenges"
                                ],
                                "verbs": [
                                    "create",
                                    "delete"
                                ]
                            },
                            {
                                "apiGroups": [
                                    "acme.cert-manager.io"
                                ],
                                "resources": [
                                    "orders/finalizers"
                                ],
                                "verbs": [
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "events"
                                ],
                                "verbs": [
                                    "create",
                                    "patch"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-orders\"},\"rules\":[{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"orders\",\"orders/status\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"orders\",\"challenges\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"cert-manager.io\"],\"resources\":[\"clusterissuers\",\"issuers\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"challenges\"],\"verbs\":[\"create\",\"delete\"]},{\"apiGroups\":[\"acme.cert-manager.io\"],\"resources\":[\"orders/finalizers\"],\"verbs\":[\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\"]},{\"apiGroups\":[\"\"],\"resources\":[\"events\"],\"verbs\":[\"create\",\"patch\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:02Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:02Z"
                            }
                        ],
                        "name": "cert-manager-controller-orders",
                        "resourceVersion": "1003",
                        "uid": "b34fd12e-176f-468b-9ffc-28f1eb3ac797"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders",
                                "orders/status"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders",
                                "challenges"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resources": [
                                "clusterissuers",
                                "issuers"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "challenges"
                            ],
                            "verbs": [
                                "create",
                                "delete"
                            ]
                        },
                        {
                            "apiGroups": [
                                "acme.cert-manager.io"
                            ],
                            "resources": [
                                "orders/finalizers"
                            ],
                            "verbs": [
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "events"
                            ],
                            "verbs": [
                                "create",
                                "patch"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-orders",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-orders"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-orders",
                "custom": true,
                "id": "cert-manager-controller-orders",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-orders"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-orders"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-orders"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-orders"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-orders\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-orders\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:04Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:04Z"
                            }
                        ],
                        "name": "cert-manager-controller-orders",
                        "resourceVersion": "1008",
                        "uid": "708dad5c-d2aa-4c0b-8d19-343f5fc9c1c0"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-orders"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-orders",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-orders"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-challenges",
                "custom": true,
                "id": "cert-manager-controller-challenges",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-challenges"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-challenges"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-challenges"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-challenges"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-challenges\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-challenges\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:04Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:04Z"
                            }
                        ],
                        "name": "cert-manager-controller-challenges",
                        "resourceVersion": "1010",
                        "uid": "208f6923-89f7-48f1-b98f-56738f02755e"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-challenges"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-challenges",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-challenges"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding::cert-manager-controller-issuers",
                "custom": true,
                "id": "cert-manager-controller-issuers",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-issuers"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-issuers"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-issuers"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "ClusterRole",
                            "name": "cert-manager-controller-issuers"
                        },
                        "subjects": [
                            {
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-issuers\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"ClusterRole\",\"name\":\"cert-manager-controller-issuers\"},\"subjects\":[{\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:05Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:05Z"
                            }
                        ],
                        "name": "cert-manager-controller-issuers",
                        "resourceVersion": "1013",
                        "uid": "b8e7cabb-92a9-4409-bccb-59f66946178c"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                        "name": "cert-manager-controller-issuers"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRoleBinding::cert-manager-controller-issuers",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRoleBinding::cert-manager-controller-issuers"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-webhook:subjectaccessreviews",
                "custom": true,
                "id": "cert-manager-webhook:subjectaccessreviews",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook:subjectaccessreviews"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "authorization.k8s.io"
                            ],
                            "resources": [
                                "subjectaccessreviews"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook:subjectaccessreviews"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "authorization.k8s.io"
                                ],
                                "resources": [
                                    "subjectaccessreviews"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook:subjectaccessreviews\"},\"rules\":[{\"apiGroups\":[\"authorization.k8s.io\"],\"resources\":[\"subjectaccessreviews\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:09Z",
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:09Z"
                            }
                        ],
                        "name": "cert-manager-webhook:subjectaccessreviews",
                        "resourceVersion": "1022",
                        "uid": "ca412039-6dab-459f-8acb-dece02214d86"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "authorization.k8s.io"
                            ],
                            "resources": [
                                "subjectaccessreviews"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-webhook:subjectaccessreviews",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-webhook:subjectaccessreviews"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:ClusterRole::cert-manager-controller-approve:cert-manager-io",
                "custom": true,
                "id": "cert-manager-controller-approve:cert-manager-io",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:ClusterRole",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-controller-approve:cert-manager-io"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resourceNames": [
                                "issuers.cert-manager.io/*",
                                "clusterissuers.cert-manager.io/*"
                            ],
                            "resources": [
                                "signers"
                            ],
                            "verbs": [
                                "approve"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "ClusterRole",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-controller-approve:cert-manager-io"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    "cert-manager.io"
                                ],
                                "resourceNames": [
                                    "issuers.cert-manager.io/*",
                                    "clusterissuers.cert-manager.io/*"
                                ],
                                "resources": [
                                    "signers"
                                ],
                                "verbs": [
                                    "approve"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "ClusterRole",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"ClusterRole\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-controller-approve:cert-manager-io\"},\"rules\":[{\"apiGroups\":[\"cert-manager.io\"],\"resourceNames\":[\"issuers.cert-manager.io/*\",\"clusterissuers.cert-manager.io/*\"],\"resources\":[\"signers\"],\"verbs\":[\"approve\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:10Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:10Z"
                            }
                        ],
                        "name": "cert-manager-controller-approve:cert-manager-io",
                        "resourceVersion": "1027",
                        "uid": "04abd0ba-ddd6-4038-b5fd-78d93eca806d"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                "cert-manager.io"
                            ],
                            "resourceNames": [
                                "issuers.cert-manager.io/*",
                                "clusterissuers.cert-manager.io/*"
                            ],
                            "resources": [
                                "signers"
                            ],
                            "verbs": [
                                "approve"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:ClusterRole::cert-manager-controller-approve:cert-manager-io",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:ClusterRole::cert-manager-controller-approve:cert-manager-io"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::certificaterequests.cert-manager.io",
                "custom": true,
                "id": "certificaterequests.cert-manager.io",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                        },
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "certificaterequests.cert-manager.io"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/convert"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "cert-manager.io",
                        "names": {
                            "categories": [
                                "cert-manager"
                            ],
                            "kind": "CertificateRequest",
                            "listKind": "CertificateRequestList",
                            "plural": "certificaterequests",
                            "shortNames": [
                                "cr",
                                "crs"
                            ],
                            "singular": "certificaterequest"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha2",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "csr": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha3",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "csr": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                            },
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "certificaterequests.cert-manager.io"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "cert-manager-webhook",
                                            "namespace": "cert-manager",
                                            "path": "/convert"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1",
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "cert-manager.io",
                            "names": {
                                "categories": [
                                    "cert-manager"
                                ],
                                "kind": "CertificateRequest",
                                "listKind": "CertificateRequestList",
                                "plural": "certificaterequests",
                                "shortNames": [
                                    "cr",
                                    "crs"
                                ],
                                "singular": "certificaterequest"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                            "name": "Approved",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                            "name": "Denied",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.username",
                                            "name": "Requestor",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                            "name": "Status",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha2",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "Desired state of the CertificateRequest resource.",
                                                    "properties": {
                                                        "csr": {
                                                            "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "duration": {
                                                            "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                            "type": "string"
                                                        },
                                                        "extra": {
                                                            "additionalProperties": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "object"
                                                        },
                                                        "groups": {
                                                            "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        },
                                                        "isCA": {
                                                            "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                            "type": "boolean"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "uid": {
                                                            "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        },
                                                        "usages": {
                                                            "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                            "items": {
                                                                "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                                "enum": [
                                                                    "signing",
                                                                    "digital signature",
                                                                    "content commitment",
                                                                    "key encipherment",
                                                                    "key agreement",
                                                                    "data encipherment",
                                                                    "cert sign",
                                                                    "crl sign",
                                                                    "encipher only",
                                                                    "decipher only",
                                                                    "any",
                                                                    "server auth",
                                                                    "client auth",
                                                                    "code signing",
                                                                    "email protection",
                                                                    "s/mime",
                                                                    "ipsec end system",
                                                                    "ipsec tunnel",
                                                                    "ipsec user",
                                                                    "timestamping",
                                                                    "ocsp signing",
                                                                    "microsoft sgc",
                                                                    "netscape sgc"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "username": {
                                                            "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "csr",
                                                        "issuerRef"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                    "properties": {
                                                        "ca": {
                                                            "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "certificate": {
                                                            "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "conditions": {
                                                            "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                            "items": {
                                                                "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                                "properties": {
                                                                    "lastTransitionTime": {
                                                                        "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                        "type": "string"
                                                                    },
                                                                    "reason": {
                                                                        "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                        "enum": [
                                                                            "True",
                                                                            "False",
                                                                            "Unknown"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "status",
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                            "name": "Approved",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                            "name": "Denied",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.username",
                                            "name": "Requestor",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                            "name": "Status",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha3",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "Desired state of the CertificateRequest resource.",
                                                    "properties": {
                                                        "csr": {
                                                            "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "duration": {
                                                            "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                            "type": "string"
                                                        },
                                                        "extra": {
                                                            "additionalProperties": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "object"
                                                        },
                                                        "groups": {
                                                            "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        },
                                                        "isCA": {
                                                            "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                            "type": "boolean"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "uid": {
                                                            "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        },
                                                        "usages": {
                                                            "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                            "items": {
                                                                "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                                "enum": [
                                                                    "signing",
                                                                    "digital signature",
                                                                    "content commitment",
                                                                    "key encipherment",
                                                                    "key agreement",
                                                                    "data encipherment",
                                                                    "cert sign",
                                                                    "crl sign",
                                                                    "encipher only",
                                                                    "decipher only",
                                                                    "any",
                                                                    "server auth",
                                                                    "client auth",
                                                                    "code signing",
                                                                    "email protection",
                                                                    "s/mime",
                                                                    "ipsec end system",
                                                                    "ipsec tunnel",
                                                                    "ipsec user",
                                                                    "timestamping",
                                                                    "ocsp signing",
                                                                    "microsoft sgc",
                                                                    "netscape sgc"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "username": {
                                                            "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "csr",
                                                        "issuerRef"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                    "properties": {
                                                        "ca": {
                                                            "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "certificate": {
                                                            "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "conditions": {
                                                            "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                            "items": {
                                                                "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                                "properties": {
                                                                    "lastTransitionTime": {
                                                                        "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                        "type": "string"
                                                                    },
                                                                    "reason": {
                                                                        "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                        "enum": [
                                                                            "True",
                                                                            "False",
                                                                            "Unknown"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "status",
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                            "name": "Approved",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                            "name": "Denied",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.username",
                                            "name": "Requestor",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                            "name": "Status",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "Desired state of the CertificateRequest resource.",
                                                    "properties": {
                                                        "duration": {
                                                            "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                            "type": "string"
                                                        },
                                                        "extra": {
                                                            "additionalProperties": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "object"
                                                        },
                                                        "groups": {
                                                            "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        },
                                                        "isCA": {
                                                            "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                            "type": "boolean"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "request": {
                                                            "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        },
                                                        "usages": {
                                                            "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                            "items": {
                                                                "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                                "enum": [
                                                                    "signing",
                                                                    "digital signature",
                                                                    "content commitment",
                                                                    "key encipherment",
                                                                    "key agreement",
                                                                    "data encipherment",
                                                                    "cert sign",
                                                                    "crl sign",
                                                                    "encipher only",
                                                                    "decipher only",
                                                                    "any",
                                                                    "server auth",
                                                                    "client auth",
                                                                    "code signing",
                                                                    "email protection",
                                                                    "s/mime",
                                                                    "ipsec end system",
                                                                    "ipsec tunnel",
                                                                    "ipsec user",
                                                                    "timestamping",
                                                                    "ocsp signing",
                                                                    "microsoft sgc",
                                                                    "netscape sgc"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "username": {
                                                            "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "issuerRef",
                                                        "request"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                    "properties": {
                                                        "ca": {
                                                            "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "certificate": {
                                                            "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "conditions": {
                                                            "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                            "items": {
                                                                "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                                "properties": {
                                                                    "lastTransitionTime": {
                                                                        "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                        "type": "string"
                                                                    },
                                                                    "reason": {
                                                                        "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                        "enum": [
                                                                            "True",
                                                                            "False",
                                                                            "Unknown"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "status",
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                            "name": "Approved",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                            "name": "Denied",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                            "name": "Ready",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.username",
                                            "name": "Requestor",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                            "name": "Status",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "description": "Desired state of the CertificateRequest resource.",
                                                    "properties": {
                                                        "duration": {
                                                            "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                            "type": "string"
                                                        },
                                                        "extra": {
                                                            "additionalProperties": {
                                                                "items": {
                                                                    "type": "string"
                                                                },
                                                                "type": "array"
                                                            },
                                                            "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "object"
                                                        },
                                                        "groups": {
                                                            "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array",
                                                            "x-kubernetes-list-type": "atomic"
                                                        },
                                                        "isCA": {
                                                            "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                            "type": "boolean"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "request": {
                                                            "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "uid": {
                                                            "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        },
                                                        "usages": {
                                                            "description": "Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.",
                                                            "items": {
                                                                "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                                "enum": [
                                                                    "signing",
                                                                    "digital signature",
                                                                    "content commitment",
                                                                    "key encipherment",
                                                                    "key agreement",
                                                                    "data encipherment",
                                                                    "cert sign",
                                                                    "crl sign",
                                                                    "encipher only",
                                                                    "decipher only",
                                                                    "any",
                                                                    "server auth",
                                                                    "client auth",
                                                                    "code signing",
                                                                    "email protection",
                                                                    "s/mime",
                                                                    "ipsec end system",
                                                                    "ipsec tunnel",
                                                                    "ipsec user",
                                                                    "timestamping",
                                                                    "ocsp signing",
                                                                    "microsoft sgc",
                                                                    "netscape sgc"
                                                                ],
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "username": {
                                                            "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "issuerRef",
                                                        "request"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                    "properties": {
                                                        "ca": {
                                                            "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "certificate": {
                                                            "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "conditions": {
                                                            "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                            "items": {
                                                                "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                                "properties": {
                                                                    "lastTransitionTime": {
                                                                        "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                        "format": "date-time",
                                                                        "type": "string"
                                                                    },
                                                                    "message": {
                                                                        "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                        "type": "string"
                                                                    },
                                                                    "reason": {
                                                                        "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                        "type": "string"
                                                                    },
                                                                    "status": {
                                                                        "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                        "enum": [
                                                                            "True",
                                                                            "False",
                                                                            "Unknown"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "type": {
                                                                        "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "status",
                                                                    "type"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"cert-manager.io/inject-ca-from-secret\":\"cert-manager/cert-manager-webhook-ca\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"certificaterequests.cert-manager.io\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\",\"path\":\"/convert\"}},\"conversionReviewVersions\":[\"v1\",\"v1beta1\"]}},\"group\":\"cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\"],\"kind\":\"CertificateRequest\",\"listKind\":\"CertificateRequestList\",\"plural\":\"certificaterequests\",\"shortNames\":[\"cr\",\"crs\"],\"singular\":\"certificaterequest\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Approved\\\")].status\",\"name\":\"Approved\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Denied\\\")].status\",\"name\":\"Denied\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"type\":\"string\"},{\"jsonPath\":\".spec.username\",\"name\":\"Requestor\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1alpha2\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A CertificateRequest is used to request a signed certificate from one of the configured issuers. \\n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \\n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the CertificateRequest resource.\",\"properties\":{\"csr\":{\"description\":\"The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.\",\"format\":\"byte\",\"type\":\"string\"},\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.\",\"type\":\"string\"},\"extra\":{\"additionalProperties\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"description\":\"Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"object\"},\"groups\":{\"description\":\"Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"isCA\":{\"description\":\"IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"uid\":{\"description\":\"UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"},\"usages\":{\"description\":\"Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \\\"signing\\\", \\\"digital signature\\\", \\\"content commitment\\\", \\\"key encipherment\\\", \\\"key agreement\\\", \\\"data encipherment\\\", \\\"cert sign\\\", \\\"crl sign\\\", \\\"encipher only\\\", \\\"decipher only\\\", \\\"any\\\", \\\"server auth\\\", \\\"client auth\\\", \\\"code signing\\\", \\\"email protection\\\", \\\"s/mime\\\", \\\"ipsec end system\\\", \\\"ipsec tunnel\\\", \\\"ipsec user\\\", \\\"timestamping\\\", \\\"ocsp signing\\\", \\\"microsoft sgc\\\", \\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"},\"username\":{\"description\":\"Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"}},\"required\":[\"csr\",\"issuerRef\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the CertificateRequest. This is set and managed automatically.\",\"properties\":{\"ca\":{\"description\":\"The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.\",\"format\":\"byte\",\"type\":\"string\"},\"certificate\":{\"description\":\"The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.\",\"format\":\"byte\",\"type\":\"string\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.\",\"items\":{\"description\":\"CertificateRequestCondition contains condition information for a CertificateRequest.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status change of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last transition, complementing reason.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last transition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Approved\\\")].status\",\"name\":\"Approved\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Denied\\\")].status\",\"name\":\"Denied\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"type\":\"string\"},{\"jsonPath\":\".spec.username\",\"name\":\"Requestor\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1alpha3\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A CertificateRequest is used to request a signed certificate from one of the configured issuers. \\n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \\n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the CertificateRequest resource.\",\"properties\":{\"csr\":{\"description\":\"The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.\",\"format\":\"byte\",\"type\":\"string\"},\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.\",\"type\":\"string\"},\"extra\":{\"additionalProperties\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"description\":\"Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"object\"},\"groups\":{\"description\":\"Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"isCA\":{\"description\":\"IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"uid\":{\"description\":\"UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"},\"usages\":{\"description\":\"Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \\\"signing\\\", \\\"digital signature\\\", \\\"content commitment\\\", \\\"key encipherment\\\", \\\"key agreement\\\", \\\"data encipherment\\\", \\\"cert sign\\\", \\\"crl sign\\\", \\\"encipher only\\\", \\\"decipher only\\\", \\\"any\\\", \\\"server auth\\\", \\\"client auth\\\", \\\"code signing\\\", \\\"email protection\\\", \\\"s/mime\\\", \\\"ipsec end system\\\", \\\"ipsec tunnel\\\", \\\"ipsec user\\\", \\\"timestamping\\\", \\\"ocsp signing\\\", \\\"microsoft sgc\\\", \\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"},\"username\":{\"description\":\"Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"}},\"required\":[\"csr\",\"issuerRef\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the CertificateRequest. This is set and managed automatically.\",\"properties\":{\"ca\":{\"description\":\"The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.\",\"format\":\"byte\",\"type\":\"string\"},\"certificate\":{\"description\":\"The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.\",\"format\":\"byte\",\"type\":\"string\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.\",\"items\":{\"description\":\"CertificateRequestCondition contains condition information for a CertificateRequest.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status change of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last transition, complementing reason.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last transition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Approved\\\")].status\",\"name\":\"Approved\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Denied\\\")].status\",\"name\":\"Denied\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"type\":\"string\"},{\"jsonPath\":\".spec.username\",\"name\":\"Requestor\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A CertificateRequest is used to request a signed certificate from one of the configured issuers. \\n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \\n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the CertificateRequest resource.\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.\",\"type\":\"string\"},\"extra\":{\"additionalProperties\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"description\":\"Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"object\"},\"groups\":{\"description\":\"Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"isCA\":{\"description\":\"IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.\",\"format\":\"byte\",\"type\":\"string\"},\"uid\":{\"description\":\"UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"},\"usages\":{\"description\":\"Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \\\"signing\\\", \\\"digital signature\\\", \\\"content commitment\\\", \\\"key encipherment\\\", \\\"key agreement\\\", \\\"data encipherment\\\", \\\"cert sign\\\", \\\"crl sign\\\", \\\"encipher only\\\", \\\"decipher only\\\", \\\"any\\\", \\\"server auth\\\", \\\"client auth\\\", \\\"code signing\\\", \\\"email protection\\\", \\\"s/mime\\\", \\\"ipsec end system\\\", \\\"ipsec tunnel\\\", \\\"ipsec user\\\", \\\"timestamping\\\", \\\"ocsp signing\\\", \\\"microsoft sgc\\\", \\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"},\"username\":{\"description\":\"Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the CertificateRequest. This is set and managed automatically.\",\"properties\":{\"ca\":{\"description\":\"The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.\",\"format\":\"byte\",\"type\":\"string\"},\"certificate\":{\"description\":\"The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.\",\"format\":\"byte\",\"type\":\"string\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.\",\"items\":{\"description\":\"CertificateRequestCondition contains condition information for a CertificateRequest.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status change of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last transition, complementing reason.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last transition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.conditions[?(@.type==\\\"Approved\\\")].status\",\"name\":\"Approved\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Denied\\\")].status\",\"name\":\"Denied\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].status\",\"name\":\"Ready\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"type\":\"string\"},{\"jsonPath\":\".spec.username\",\"name\":\"Requestor\",\"type\":\"string\"},{\"jsonPath\":\".status.conditions[?(@.type==\\\"Ready\\\")].message\",\"name\":\"Status\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"A CertificateRequest is used to request a signed certificate from one of the configured issuers. \\n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \\n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"description\":\"Desired state of the CertificateRequest resource.\",\"properties\":{\"duration\":{\"description\":\"The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.\",\"type\":\"string\"},\"extra\":{\"additionalProperties\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"description\":\"Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"object\"},\"groups\":{\"description\":\"Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"items\":{\"type\":\"string\"},\"type\":\"array\",\"x-kubernetes-list-type\":\"atomic\"},\"isCA\":{\"description\":\"IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.\",\"type\":\"boolean\"},\"issuerRef\":{\"description\":\"IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.\",\"format\":\"byte\",\"type\":\"string\"},\"uid\":{\"description\":\"UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"},\"usages\":{\"description\":\"Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.\",\"items\":{\"description\":\"KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \\\"signing\\\", \\\"digital signature\\\", \\\"content commitment\\\", \\\"key encipherment\\\", \\\"key agreement\\\", \\\"data encipherment\\\", \\\"cert sign\\\", \\\"crl sign\\\", \\\"encipher only\\\", \\\"decipher only\\\", \\\"any\\\", \\\"server auth\\\", \\\"client auth\\\", \\\"code signing\\\", \\\"email protection\\\", \\\"s/mime\\\", \\\"ipsec end system\\\", \\\"ipsec tunnel\\\", \\\"ipsec user\\\", \\\"timestamping\\\", \\\"ocsp signing\\\", \\\"microsoft sgc\\\", \\\"netscape sgc\\\"\",\"enum\":[\"signing\",\"digital signature\",\"content commitment\",\"key encipherment\",\"key agreement\",\"data encipherment\",\"cert sign\",\"crl sign\",\"encipher only\",\"decipher only\",\"any\",\"server auth\",\"client auth\",\"code signing\",\"email protection\",\"s/mime\",\"ipsec end system\",\"ipsec tunnel\",\"ipsec user\",\"timestamping\",\"ocsp signing\",\"microsoft sgc\",\"netscape sgc\"],\"type\":\"string\"},\"type\":\"array\"},\"username\":{\"description\":\"Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"description\":\"Status of the CertificateRequest. This is set and managed automatically.\",\"properties\":{\"ca\":{\"description\":\"The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.\",\"format\":\"byte\",\"type\":\"string\"},\"certificate\":{\"description\":\"The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.\",\"format\":\"byte\",\"type\":\"string\"},\"conditions\":{\"description\":\"List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.\",\"items\":{\"description\":\"CertificateRequestCondition contains condition information for a CertificateRequest.\",\"properties\":{\"lastTransitionTime\":{\"description\":\"LastTransitionTime is the timestamp corresponding to the last status change of this condition.\",\"format\":\"date-time\",\"type\":\"string\"},\"message\":{\"description\":\"Message is a human readable description of the details of the last transition, complementing reason.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason is a brief machine readable explanation for the condition's last transition.\",\"type\":\"string\"},\"status\":{\"description\":\"Status of the condition, one of (`True`, `False`, `Unknown`).\",\"enum\":[\"True\",\"False\",\"Unknown\"],\"type\":\"string\"},\"type\":{\"description\":\"Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).\",\"type\":\"string\"}},\"required\":[\"status\",\"type\"],\"type\":\"object\"},\"type\":\"array\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:14Z",
                        "generation": 1,
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:14Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:cert-manager.io/inject-ca-from-secret": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:path": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:shortNames": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:14Z"
                            }
                        ],
                        "name": "certificaterequests.cert-manager.io",
                        "resourceVersion": "1049",
                        "uid": "1c6e9d02-1ee0-4a85-8fdb-1f0d7be468bf"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/convert",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "cert-manager.io",
                        "names": {
                            "categories": [
                                "cert-manager"
                            ],
                            "kind": "CertificateRequest",
                            "listKind": "CertificateRequestList",
                            "plural": "certificaterequests",
                            "shortNames": [
                                "cr",
                                "crs"
                            ],
                            "singular": "certificaterequest"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha2",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "csr": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha3",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "csr": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Approved\")].status",
                                        "name": "Approved",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Denied\")].status",
                                        "name": "Denied",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].status",
                                        "name": "Ready",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.username",
                                        "name": "Requestor",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.conditions[?(@.type==\"Ready\")].message",
                                        "name": "Status",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used.",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "description": "Desired state of the CertificateRequest resource.",
                                                "properties": {
                                                    "duration": {
                                                        "description": "The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.",
                                                        "type": "string"
                                                    },
                                                    "extra": {
                                                        "additionalProperties": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "description": "Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "object"
                                                    },
                                                    "groups": {
                                                        "description": "Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array",
                                                        "x-kubernetes-list-type": "atomic"
                                                    },
                                                    "isCA": {
                                                        "description": "IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.",
                                                        "type": "boolean"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "uid": {
                                                        "description": "UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    },
                                                    "usages": {
                                                        "description": "Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.",
                                                        "items": {
                                                            "description": "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12 Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\"",
                                                            "enum": [
                                                                "signing",
                                                                "digital signature",
                                                                "content commitment",
                                                                "key encipherment",
                                                                "key agreement",
                                                                "data encipherment",
                                                                "cert sign",
                                                                "crl sign",
                                                                "encipher only",
                                                                "decipher only",
                                                                "any",
                                                                "server auth",
                                                                "client auth",
                                                                "code signing",
                                                                "email protection",
                                                                "s/mime",
                                                                "ipsec end system",
                                                                "ipsec tunnel",
                                                                "ipsec user",
                                                                "timestamping",
                                                                "ocsp signing",
                                                                "microsoft sgc",
                                                                "netscape sgc"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "username": {
                                                        "description": "Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "description": "Status of the CertificateRequest. This is set and managed automatically.",
                                                "properties": {
                                                    "ca": {
                                                        "description": "The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "certificate": {
                                                        "description": "The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "conditions": {
                                                        "description": "List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.",
                                                        "items": {
                                                            "description": "CertificateRequestCondition contains condition information for a CertificateRequest.",
                                                            "properties": {
                                                                "lastTransitionTime": {
                                                                    "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                                                                    "format": "date-time",
                                                                    "type": "string"
                                                                },
                                                                "message": {
                                                                    "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                                                                    "type": "string"
                                                                },
                                                                "reason": {
                                                                    "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                                                                    "type": "string"
                                                                },
                                                                "status": {
                                                                    "description": "Status of the condition, one of (`True`, `False`, `Unknown`).",
                                                                    "enum": [
                                                                        "True",
                                                                        "False",
                                                                        "Unknown"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "type": {
                                                                    "description": "Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "status",
                                                                "type"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "cert-manager"
                            ],
                            "kind": "CertificateRequest",
                            "listKind": "CertificateRequestList",
                            "plural": "certificaterequests",
                            "shortNames": [
                                "cr",
                                "crs"
                            ],
                            "singular": "certificaterequest"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-11-04T10:31:14Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-11-04T10:31:14Z",
                                "message": "the initial names have been accepted",
                                "reason": "Installing",
                                "status": "False",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinition::certificaterequests.cert-manager.io"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:core/v1:Namespace::cert-manager",
                "custom": true,
                "id": "cert-manager",
                "type": "kubernetes:core/v1:Namespace",
                "inputs": {
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi"
                        },
                        "name": "cert-manager"
                    }
                },
                "outputs": {
                    "__initialApiVersion": "v1",
                    "__inputs": {
                        "apiVersion": "v1",
                        "kind": "Namespace",
                        "metadata": {
                            "labels": {
                                "app.kubernetes.io/managed-by": "pulumi"
                            },
                            "name": "cert-manager"
                        }
                    },
                    "apiVersion": "v1",
                    "kind": "Namespace",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Namespace\",\"metadata\":{\"labels\":{\"app.kubernetes.io/managed-by\":\"pulumi\"},\"name\":\"cert-manager\"}}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:22Z",
                        "labels": {
                            "app.kubernetes.io/managed-by": "pulumi",
                            "kubernetes.io/metadata.name": "cert-manager"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:kubernetes.io/metadata.name": {}
                                        }
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:22Z"
                            }
                        ],
                        "name": "cert-manager",
                        "resourceVersion": "1079",
                        "uid": "19ee8ffa-c303-4604-9795-b1d4cd30cca9"
                    },
                    "spec": {
                        "finalizers": [
                            "kubernetes"
                        ]
                    },
                    "status": {
                        "phase": "Active"
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null
                }
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::kube-system/cert-manager:leaderelection",
                "custom": true,
                "id": "kube-system/cert-manager:leaderelection",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager:leaderelection",
                        "namespace": "kube-system"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager:leaderelection"
                    },
                    "subjects": [
                        {
                            "apiGroup": "",
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/component": "controller",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager:leaderelection",
                            "namespace": "kube-system"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "cert-manager:leaderelection"
                        },
                        "subjects": [
                            {
                                "apiGroup": "",
                                "kind": "ServiceAccount",
                                "name": "cert-manager",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/component\":\"controller\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager:leaderelection\",\"namespace\":\"kube-system\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"cert-manager:leaderelection\"},\"subjects\":[{\"apiGroup\":\"\",\"kind\":\"ServiceAccount\",\"name\":\"cert-manager\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:22Z",
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/component": "controller",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:22Z"
                            }
                        ],
                        "name": "cert-manager:leaderelection",
                        "namespace": "kube-system",
                        "resourceVersion": "1080",
                        "uid": "ad74de30-4f93-4a2e-9c23-2da191ffc3d4"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager:leaderelection"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding::kube-system/cert-manager:leaderelection",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding::kube-system/cert-manager:leaderelection"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:RoleBinding::cert-manager/cert-manager-webhook:dynamic-serving",
                "custom": true,
                "id": "cert-manager/cert-manager-webhook:dynamic-serving",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:RoleBinding",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook:dynamic-serving",
                        "namespace": "cert-manager"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager-webhook:dynamic-serving"
                    },
                    "subjects": [
                        {
                            "apiGroup": "",
                            "kind": "ServiceAccount",
                            "name": "cert-manager-webhook",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "RoleBinding",
                        "metadata": {
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook:dynamic-serving",
                            "namespace": "cert-manager"
                        },
                        "roleRef": {
                            "apiGroup": "rbac.authorization.k8s.io",
                            "kind": "Role",
                            "name": "cert-manager-webhook:dynamic-serving"
                        },
                        "subjects": [
                            {
                                "apiGroup": "",
                                "kind": "ServiceAccount",
                                "name": "cert-manager-webhook",
                                "namespace": "cert-manager"
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "RoleBinding",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"RoleBinding\",\"metadata\":{\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook:dynamic-serving\",\"namespace\":\"cert-manager\"},\"roleRef\":{\"apiGroup\":\"rbac.authorization.k8s.io\",\"kind\":\"Role\",\"name\":\"cert-manager-webhook:dynamic-serving\"},\"subjects\":[{\"apiGroup\":\"\",\"kind\":\"ServiceAccount\",\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\"}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:29Z",
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:roleRef": {
                                        "f:apiGroup": {},
                                        "f:kind": {},
                                        "f:name": {}
                                    },
                                    "f:subjects": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:29Z"
                            }
                        ],
                        "name": "cert-manager-webhook:dynamic-serving",
                        "namespace": "cert-manager",
                        "resourceVersion": "1137",
                        "uid": "d387146c-5b83-40f0-a1d9-3419ba993405"
                    },
                    "roleRef": {
                        "apiGroup": "rbac.authorization.k8s.io",
                        "kind": "Role",
                        "name": "cert-manager-webhook:dynamic-serving"
                    },
                    "subjects": [
                        {
                            "kind": "ServiceAccount",
                            "name": "cert-manager-webhook",
                            "namespace": "cert-manager"
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "roleRef": null,
                    "subjects": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:RoleBinding::cert-manager/cert-manager-webhook:dynamic-serving",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:RoleBinding::cert-manager/cert-manager-webhook:dynamic-serving"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition::orders.acme.cert-manager.io",
                "custom": true,
                "id": "orders.acme.cert-manager.io",
                "type": "kubernetes:apiextensions.k8s.io/v1:CustomResourceDefinition",
                "inputs": {
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                        },
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "orders.acme.cert-manager.io"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/convert"
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "acme.cert-manager.io",
                        "names": {
                            "categories": [
                                "cert-manager",
                                "cert-manager-acme"
                            ],
                            "kind": "Order",
                            "listKind": "OrderList",
                            "plural": "orders",
                            "singular": "order"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha2",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "csr": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha3",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "csr": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    }
                },
                "outputs": {
                    "__initialApiVersion": "apiextensions.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "apiextensions.k8s.io/v1",
                        "kind": "CustomResourceDefinition",
                        "metadata": {
                            "annotations": {
                                "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca"
                            },
                            "labels": {
                                "app": "cert-manager",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "cert-manager",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "orders.acme.cert-manager.io"
                        },
                        "spec": {
                            "conversion": {
                                "strategy": "Webhook",
                                "webhook": {
                                    "clientConfig": {
                                        "service": {
                                            "name": "cert-manager-webhook",
                                            "namespace": "cert-manager",
                                            "path": "/convert"
                                        }
                                    },
                                    "conversionReviewVersions": [
                                        "v1",
                                        "v1beta1"
                                    ]
                                }
                            },
                            "group": "acme.cert-manager.io",
                            "names": {
                                "categories": [
                                    "cert-manager",
                                    "cert-manager-acme"
                                ],
                                "kind": "Order",
                                "listKind": "OrderList",
                                "plural": "orders",
                                "singular": "order"
                            },
                            "scope": "Namespaced",
                            "versions": [
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.state",
                                            "name": "State",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.reason",
                                            "name": "Reason",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha2",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Order is a type to represent an Order with an ACME server",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                            "type": "string"
                                                        },
                                                        "csr": {
                                                            "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "dnsNames": {
                                                            "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "duration": {
                                                            "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                            "type": "string"
                                                        },
                                                        "ipAddresses": {
                                                            "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "csr",
                                                        "issuerRef"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "properties": {
                                                        "authorizations": {
                                                            "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                            "items": {
                                                                "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                                "properties": {
                                                                    "challenges": {
                                                                        "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                        "items": {
                                                                            "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                            "properties": {
                                                                                "token": {
                                                                                    "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                    "type": "string"
                                                                                },
                                                                                "url": {
                                                                                    "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "token",
                                                                                "type",
                                                                                "url"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "identifier": {
                                                                        "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                        "type": "string"
                                                                    },
                                                                    "initialState": {
                                                                        "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                        "enum": [
                                                                            "valid",
                                                                            "ready",
                                                                            "pending",
                                                                            "processing",
                                                                            "invalid",
                                                                            "expired",
                                                                            "errored"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "url": {
                                                                        "description": "URL is the URL of the Authorization that must be completed",
                                                                        "type": "string"
                                                                    },
                                                                    "wildcard": {
                                                                        "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "url"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "certificate": {
                                                            "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "finalizeURL": {
                                                            "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                            "enum": [
                                                                "valid",
                                                                "ready",
                                                                "pending",
                                                                "processing",
                                                                "invalid",
                                                                "expired",
                                                                "errored"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "url": {
                                                            "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.state",
                                            "name": "State",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.reason",
                                            "name": "Reason",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1alpha3",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Order is a type to represent an Order with an ACME server",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                            "type": "string"
                                                        },
                                                        "csr": {
                                                            "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "dnsNames": {
                                                            "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "duration": {
                                                            "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                            "type": "string"
                                                        },
                                                        "ipAddresses": {
                                                            "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        }
                                                    },
                                                    "required": [
                                                        "csr",
                                                        "issuerRef"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "properties": {
                                                        "authorizations": {
                                                            "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                            "items": {
                                                                "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                                "properties": {
                                                                    "challenges": {
                                                                        "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                        "items": {
                                                                            "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                            "properties": {
                                                                                "token": {
                                                                                    "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                    "type": "string"
                                                                                },
                                                                                "url": {
                                                                                    "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "token",
                                                                                "type",
                                                                                "url"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "identifier": {
                                                                        "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                        "type": "string"
                                                                    },
                                                                    "initialState": {
                                                                        "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                        "enum": [
                                                                            "valid",
                                                                            "ready",
                                                                            "pending",
                                                                            "processing",
                                                                            "invalid",
                                                                            "expired",
                                                                            "errored"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "url": {
                                                                        "description": "URL is the URL of the Authorization that must be completed",
                                                                        "type": "string"
                                                                    },
                                                                    "wildcard": {
                                                                        "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "url"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "certificate": {
                                                            "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "finalizeURL": {
                                                            "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                            "enum": [
                                                                "valid",
                                                                "ready",
                                                                "pending",
                                                                "processing",
                                                                "invalid",
                                                                "expired",
                                                                "errored"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "url": {
                                                            "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.state",
                                            "name": "State",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.reason",
                                            "name": "Reason",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1beta1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Order is a type to represent an Order with an ACME server",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                            "type": "string"
                                                        },
                                                        "dnsNames": {
                                                            "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "duration": {
                                                            "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                            "type": "string"
                                                        },
                                                        "ipAddresses": {
                                                            "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "request": {
                                                            "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "issuerRef",
                                                        "request"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "properties": {
                                                        "authorizations": {
                                                            "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                            "items": {
                                                                "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                                "properties": {
                                                                    "challenges": {
                                                                        "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                        "items": {
                                                                            "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                            "properties": {
                                                                                "token": {
                                                                                    "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                    "type": "string"
                                                                                },
                                                                                "url": {
                                                                                    "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "token",
                                                                                "type",
                                                                                "url"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "identifier": {
                                                                        "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                        "type": "string"
                                                                    },
                                                                    "initialState": {
                                                                        "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                        "enum": [
                                                                            "valid",
                                                                            "ready",
                                                                            "pending",
                                                                            "processing",
                                                                            "invalid",
                                                                            "expired",
                                                                            "errored"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "url": {
                                                                        "description": "URL is the URL of the Authorization that must be completed",
                                                                        "type": "string"
                                                                    },
                                                                    "wildcard": {
                                                                        "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "url"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "certificate": {
                                                            "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "finalizeURL": {
                                                            "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                            "enum": [
                                                                "valid",
                                                                "ready",
                                                                "pending",
                                                                "processing",
                                                                "invalid",
                                                                "expired",
                                                                "errored"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "url": {
                                                            "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": false,
                                    "storage": false,
                                    "subresources": {
                                        "status": {}
                                    }
                                },
                                {
                                    "additionalPrinterColumns": [
                                        {
                                            "jsonPath": ".status.state",
                                            "name": "State",
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".spec.issuerRef.name",
                                            "name": "Issuer",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "jsonPath": ".status.reason",
                                            "name": "Reason",
                                            "priority": 1,
                                            "type": "string"
                                        },
                                        {
                                            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                            "jsonPath": ".metadata.creationTimestamp",
                                            "name": "Age",
                                            "type": "date"
                                        }
                                    ],
                                    "name": "v1",
                                    "schema": {
                                        "openAPIV3Schema": {
                                            "description": "Order is a type to represent an Order with an ACME server",
                                            "properties": {
                                                "apiVersion": {
                                                    "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                    "type": "string"
                                                },
                                                "kind": {
                                                    "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                    "type": "string"
                                                },
                                                "metadata": {
                                                    "type": "object"
                                                },
                                                "spec": {
                                                    "properties": {
                                                        "commonName": {
                                                            "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                            "type": "string"
                                                        },
                                                        "dnsNames": {
                                                            "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "duration": {
                                                            "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                            "type": "string"
                                                        },
                                                        "ipAddresses": {
                                                            "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "issuerRef": {
                                                            "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                            "properties": {
                                                                "group": {
                                                                    "description": "Group of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "kind": {
                                                                    "description": "Kind of the resource being referred to.",
                                                                    "type": "string"
                                                                },
                                                                "name": {
                                                                    "description": "Name of the resource being referred to.",
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "name"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "request": {
                                                            "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "issuerRef",
                                                        "request"
                                                    ],
                                                    "type": "object"
                                                },
                                                "status": {
                                                    "properties": {
                                                        "authorizations": {
                                                            "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                            "items": {
                                                                "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                                "properties": {
                                                                    "challenges": {
                                                                        "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                        "items": {
                                                                            "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                            "properties": {
                                                                                "token": {
                                                                                    "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                    "type": "string"
                                                                                },
                                                                                "type": {
                                                                                    "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                    "type": "string"
                                                                                },
                                                                                "url": {
                                                                                    "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                    "type": "string"
                                                                                }
                                                                            },
                                                                            "required": [
                                                                                "token",
                                                                                "type",
                                                                                "url"
                                                                            ],
                                                                            "type": "object"
                                                                        },
                                                                        "type": "array"
                                                                    },
                                                                    "identifier": {
                                                                        "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                        "type": "string"
                                                                    },
                                                                    "initialState": {
                                                                        "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                        "enum": [
                                                                            "valid",
                                                                            "ready",
                                                                            "pending",
                                                                            "processing",
                                                                            "invalid",
                                                                            "expired",
                                                                            "errored"
                                                                        ],
                                                                        "type": "string"
                                                                    },
                                                                    "url": {
                                                                        "description": "URL is the URL of the Authorization that must be completed",
                                                                        "type": "string"
                                                                    },
                                                                    "wildcard": {
                                                                        "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "url"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "certificate": {
                                                            "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                            "format": "byte",
                                                            "type": "string"
                                                        },
                                                        "failureTime": {
                                                            "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                            "format": "date-time",
                                                            "type": "string"
                                                        },
                                                        "finalizeURL": {
                                                            "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                            "type": "string"
                                                        },
                                                        "reason": {
                                                            "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                            "type": "string"
                                                        },
                                                        "state": {
                                                            "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                            "enum": [
                                                                "valid",
                                                                "ready",
                                                                "pending",
                                                                "processing",
                                                                "invalid",
                                                                "expired",
                                                                "errored"
                                                            ],
                                                            "type": "string"
                                                        },
                                                        "url": {
                                                            "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "required": [
                                                "metadata",
                                                "spec"
                                            ],
                                            "type": "object"
                                        }
                                    },
                                    "served": true,
                                    "storage": true,
                                    "subresources": {
                                        "status": {}
                                    }
                                }
                            ]
                        }
                    },
                    "apiVersion": "apiextensions.k8s.io/v1",
                    "kind": "CustomResourceDefinition",
                    "metadata": {
                        "annotations": {
                            "cert-manager.io/inject-ca-from-secret": "cert-manager/cert-manager-webhook-ca",
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apiextensions.k8s.io/v1\",\"kind\":\"CustomResourceDefinition\",\"metadata\":{\"annotations\":{\"cert-manager.io/inject-ca-from-secret\":\"cert-manager/cert-manager-webhook-ca\"},\"labels\":{\"app\":\"cert-manager\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"cert-manager\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"orders.acme.cert-manager.io\"},\"spec\":{\"conversion\":{\"strategy\":\"Webhook\",\"webhook\":{\"clientConfig\":{\"service\":{\"name\":\"cert-manager-webhook\",\"namespace\":\"cert-manager\",\"path\":\"/convert\"}},\"conversionReviewVersions\":[\"v1\",\"v1beta1\"]}},\"group\":\"acme.cert-manager.io\",\"names\":{\"categories\":[\"cert-manager\",\"cert-manager-acme\"],\"kind\":\"Order\",\"listKind\":\"OrderList\",\"plural\":\"orders\",\"singular\":\"order\"},\"scope\":\"Namespaced\",\"versions\":[{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1alpha2\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Order is a type to represent an Order with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"commonName\":{\"description\":\"CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.\",\"type\":\"string\"},\"csr\":{\"description\":\"Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.\",\"format\":\"byte\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.\",\"type\":\"string\"},\"ipAddresses\":{\"description\":\"IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuerRef\":{\"description\":\"IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"csr\",\"issuerRef\"],\"type\":\"object\"},\"status\":{\"properties\":{\"authorizations\":{\"description\":\"Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.\",\"items\":{\"description\":\"ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.\",\"properties\":{\"challenges\":{\"description\":\"Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.\",\"items\":{\"description\":\"Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.\",\"properties\":{\"token\":{\"description\":\"Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.\",\"type\":\"string\"}},\"required\":[\"token\",\"type\",\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"identifier\":{\"description\":\"Identifier is the DNS name to be validated as part of this authorization\",\"type\":\"string\"},\"initialState\":{\"description\":\"InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the Authorization that must be completed\",\"type\":\"string\"},\"wildcard\":{\"description\":\"Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.\",\"type\":\"boolean\"}},\"required\":[\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"certificate\":{\"description\":\"Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.\",\"format\":\"byte\",\"type\":\"string\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"},\"finalizeURL\":{\"description\":\"FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason optionally provides more information about a why the order is in the current state.\",\"type\":\"string\"},\"state\":{\"description\":\"State contains the current state of this Order resource. States 'success' and 'expired' are 'final'\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\"],\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1alpha3\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Order is a type to represent an Order with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"commonName\":{\"description\":\"CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.\",\"type\":\"string\"},\"csr\":{\"description\":\"Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.\",\"format\":\"byte\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.\",\"type\":\"string\"},\"ipAddresses\":{\"description\":\"IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuerRef\":{\"description\":\"IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"}},\"required\":[\"csr\",\"issuerRef\"],\"type\":\"object\"},\"status\":{\"properties\":{\"authorizations\":{\"description\":\"Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.\",\"items\":{\"description\":\"ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.\",\"properties\":{\"challenges\":{\"description\":\"Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.\",\"items\":{\"description\":\"Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.\",\"properties\":{\"token\":{\"description\":\"Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.\",\"type\":\"string\"}},\"required\":[\"token\",\"type\",\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"identifier\":{\"description\":\"Identifier is the DNS name to be validated as part of this authorization\",\"type\":\"string\"},\"initialState\":{\"description\":\"InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the Authorization that must be completed\",\"type\":\"string\"},\"wildcard\":{\"description\":\"Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.\",\"type\":\"boolean\"}},\"required\":[\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"certificate\":{\"description\":\"Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.\",\"format\":\"byte\",\"type\":\"string\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"},\"finalizeURL\":{\"description\":\"FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason optionally provides more information about a why the order is in the current state.\",\"type\":\"string\"},\"state\":{\"description\":\"State contains the current state of this Order resource. States 'success' and 'expired' are 'final'\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\"],\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1beta1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Order is a type to represent an Order with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"commonName\":{\"description\":\"CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.\",\"type\":\"string\"},\"ipAddresses\":{\"description\":\"IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuerRef\":{\"description\":\"IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.\",\"format\":\"byte\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"properties\":{\"authorizations\":{\"description\":\"Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.\",\"items\":{\"description\":\"ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.\",\"properties\":{\"challenges\":{\"description\":\"Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.\",\"items\":{\"description\":\"Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.\",\"properties\":{\"token\":{\"description\":\"Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.\",\"type\":\"string\"}},\"required\":[\"token\",\"type\",\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"identifier\":{\"description\":\"Identifier is the DNS name to be validated as part of this authorization\",\"type\":\"string\"},\"initialState\":{\"description\":\"InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the Authorization that must be completed\",\"type\":\"string\"},\"wildcard\":{\"description\":\"Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.\",\"type\":\"boolean\"}},\"required\":[\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"certificate\":{\"description\":\"Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.\",\"format\":\"byte\",\"type\":\"string\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"},\"finalizeURL\":{\"description\":\"FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason optionally provides more information about a why the order is in the current state.\",\"type\":\"string\"},\"state\":{\"description\":\"State contains the current state of this Order resource. States 'success' and 'expired' are 'final'\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":false,\"storage\":false,\"subresources\":{\"status\":{}}},{\"additionalPrinterColumns\":[{\"jsonPath\":\".status.state\",\"name\":\"State\",\"type\":\"string\"},{\"jsonPath\":\".spec.issuerRef.name\",\"name\":\"Issuer\",\"priority\":1,\"type\":\"string\"},{\"jsonPath\":\".status.reason\",\"name\":\"Reason\",\"priority\":1,\"type\":\"string\"},{\"description\":\"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\",\"jsonPath\":\".metadata.creationTimestamp\",\"name\":\"Age\",\"type\":\"date\"}],\"name\":\"v1\",\"schema\":{\"openAPIV3Schema\":{\"description\":\"Order is a type to represent an Order with an ACME server\",\"properties\":{\"apiVersion\":{\"description\":\"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\",\"type\":\"string\"},\"metadata\":{\"type\":\"object\"},\"spec\":{\"properties\":{\"commonName\":{\"description\":\"CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.\",\"type\":\"string\"},\"dnsNames\":{\"description\":\"DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"duration\":{\"description\":\"Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.\",\"type\":\"string\"},\"ipAddresses\":{\"description\":\"IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"issuerRef\":{\"description\":\"IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.\",\"properties\":{\"group\":{\"description\":\"Group of the resource being referred to.\",\"type\":\"string\"},\"kind\":{\"description\":\"Kind of the resource being referred to.\",\"type\":\"string\"},\"name\":{\"description\":\"Name of the resource being referred to.\",\"type\":\"string\"}},\"required\":[\"name\"],\"type\":\"object\"},\"request\":{\"description\":\"Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.\",\"format\":\"byte\",\"type\":\"string\"}},\"required\":[\"issuerRef\",\"request\"],\"type\":\"object\"},\"status\":{\"properties\":{\"authorizations\":{\"description\":\"Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.\",\"items\":{\"description\":\"ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.\",\"properties\":{\"challenges\":{\"description\":\"Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.\",\"items\":{\"description\":\"Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.\",\"properties\":{\"token\":{\"description\":\"Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.\",\"type\":\"string\"},\"type\":{\"description\":\"Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.\",\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.\",\"type\":\"string\"}},\"required\":[\"token\",\"type\",\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"identifier\":{\"description\":\"Identifier is the DNS name to be validated as part of this authorization\",\"type\":\"string\"},\"initialState\":{\"description\":\"InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL is the URL of the Authorization that must be completed\",\"type\":\"string\"},\"wildcard\":{\"description\":\"Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.\",\"type\":\"boolean\"}},\"required\":[\"url\"],\"type\":\"object\"},\"type\":\"array\"},\"certificate\":{\"description\":\"Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.\",\"format\":\"byte\",\"type\":\"string\"},\"failureTime\":{\"description\":\"FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.\",\"format\":\"date-time\",\"type\":\"string\"},\"finalizeURL\":{\"description\":\"FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.\",\"type\":\"string\"},\"reason\":{\"description\":\"Reason optionally provides more information about a why the order is in the current state.\",\"type\":\"string\"},\"state\":{\"description\":\"State contains the current state of this Order resource. States 'success' and 'expired' are 'final'\",\"enum\":[\"valid\",\"ready\",\"pending\",\"processing\",\"invalid\",\"expired\",\"errored\"],\"type\":\"string\"},\"url\":{\"description\":\"URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.\",\"type\":\"string\"}},\"type\":\"object\"}},\"required\":[\"metadata\",\"spec\"],\"type\":\"object\"}},\"served\":true,\"storage\":true,\"subresources\":{\"status\":{}}}]}}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:22Z",
                        "generation": 1,
                        "labels": {
                            "app": "cert-manager",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "cert-manager",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:status": {
                                        "f:acceptedNames": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:conditions": {
                                            "k:{\"type\":\"Established\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            },
                                            "k:{\"type\":\"NamesAccepted\"}": {
                                                ".": {},
                                                "f:lastTransitionTime": {},
                                                "f:message": {},
                                                "f:reason": {},
                                                "f:status": {},
                                                "f:type": {}
                                            }
                                        }
                                    }
                                },
                                "manager": "kube-apiserver",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:22Z"
                            },
                            {
                                "apiVersion": "apiextensions.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:cert-manager.io/inject-ca-from-secret": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:spec": {
                                        "f:conversion": {
                                            ".": {},
                                            "f:strategy": {},
                                            "f:webhook": {
                                                ".": {},
                                                "f:clientConfig": {
                                                    ".": {},
                                                    "f:service": {
                                                        ".": {},
                                                        "f:name": {},
                                                        "f:namespace": {},
                                                        "f:path": {},
                                                        "f:port": {}
                                                    }
                                                },
                                                "f:conversionReviewVersions": {}
                                            }
                                        },
                                        "f:group": {},
                                        "f:names": {
                                            "f:categories": {},
                                            "f:kind": {},
                                            "f:listKind": {},
                                            "f:plural": {},
                                            "f:singular": {}
                                        },
                                        "f:scope": {},
                                        "f:versions": {}
                                    }
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:22Z"
                            }
                        ],
                        "name": "orders.acme.cert-manager.io",
                        "resourceVersion": "1098",
                        "uid": "f84695c8-6f79-430a-9de0-850fbfbcb627"
                    },
                    "spec": {
                        "conversion": {
                            "strategy": "Webhook",
                            "webhook": {
                                "clientConfig": {
                                    "service": {
                                        "name": "cert-manager-webhook",
                                        "namespace": "cert-manager",
                                        "path": "/convert",
                                        "port": 443
                                    }
                                },
                                "conversionReviewVersions": [
                                    "v1",
                                    "v1beta1"
                                ]
                            }
                        },
                        "group": "acme.cert-manager.io",
                        "names": {
                            "categories": [
                                "cert-manager",
                                "cert-manager-acme"
                            ],
                            "kind": "Order",
                            "listKind": "OrderList",
                            "plural": "orders",
                            "singular": "order"
                        },
                        "scope": "Namespaced",
                        "versions": [
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha2",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "csr": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1alpha3",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "csr": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    }
                                                },
                                                "required": [
                                                    "csr",
                                                    "issuerRef"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1beta1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": false,
                                "storage": false,
                                "subresources": {
                                    "status": {}
                                }
                            },
                            {
                                "additionalPrinterColumns": [
                                    {
                                        "jsonPath": ".status.state",
                                        "name": "State",
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".spec.issuerRef.name",
                                        "name": "Issuer",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "jsonPath": ".status.reason",
                                        "name": "Reason",
                                        "priority": 1,
                                        "type": "string"
                                    },
                                    {
                                        "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.",
                                        "jsonPath": ".metadata.creationTimestamp",
                                        "name": "Age",
                                        "type": "date"
                                    }
                                ],
                                "name": "v1",
                                "schema": {
                                    "openAPIV3Schema": {
                                        "description": "Order is a type to represent an Order with an ACME server",
                                        "properties": {
                                            "apiVersion": {
                                                "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
                                                "type": "string"
                                            },
                                            "kind": {
                                                "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                                                "type": "string"
                                            },
                                            "metadata": {
                                                "type": "object"
                                            },
                                            "spec": {
                                                "properties": {
                                                    "commonName": {
                                                        "description": "CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.",
                                                        "type": "string"
                                                    },
                                                    "dnsNames": {
                                                        "description": "DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "duration": {
                                                        "description": "Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.",
                                                        "type": "string"
                                                    },
                                                    "ipAddresses": {
                                                        "description": "IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "issuerRef": {
                                                        "description": "IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.",
                                                        "properties": {
                                                            "group": {
                                                                "description": "Group of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "kind": {
                                                                "description": "Kind of the resource being referred to.",
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "description": "Name of the resource being referred to.",
                                                                "type": "string"
                                                            }
                                                        },
                                                        "required": [
                                                            "name"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    "request": {
                                                        "description": "Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "issuerRef",
                                                    "request"
                                                ],
                                                "type": "object"
                                            },
                                            "status": {
                                                "properties": {
                                                    "authorizations": {
                                                        "description": "Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.",
                                                        "items": {
                                                            "description": "ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.",
                                                            "properties": {
                                                                "challenges": {
                                                                    "description": "Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.",
                                                                    "items": {
                                                                        "description": "Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.",
                                                                        "properties": {
                                                                            "token": {
                                                                                "description": "Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.",
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.",
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "token",
                                                                            "type",
                                                                            "url"
                                                                        ],
                                                                        "type": "object"
                                                                    },
                                                                    "type": "array"
                                                                },
                                                                "identifier": {
                                                                    "description": "Identifier is the DNS name to be validated as part of this authorization",
                                                                    "type": "string"
                                                                },
                                                                "initialState": {
                                                                    "description": "InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.",
                                                                    "enum": [
                                                                        "valid",
                                                                        "ready",
                                                                        "pending",
                                                                        "processing",
                                                                        "invalid",
                                                                        "expired",
                                                                        "errored"
                                                                    ],
                                                                    "type": "string"
                                                                },
                                                                "url": {
                                                                    "description": "URL is the URL of the Authorization that must be completed",
                                                                    "type": "string"
                                                                },
                                                                "wildcard": {
                                                                    "description": "Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.",
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "url"
                                                            ],
                                                            "type": "object"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "certificate": {
                                                        "description": "Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.",
                                                        "format": "byte",
                                                        "type": "string"
                                                    },
                                                    "failureTime": {
                                                        "description": "FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.",
                                                        "format": "date-time",
                                                        "type": "string"
                                                    },
                                                    "finalizeURL": {
                                                        "description": "FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.",
                                                        "type": "string"
                                                    },
                                                    "reason": {
                                                        "description": "Reason optionally provides more information about a why the order is in the current state.",
                                                        "type": "string"
                                                    },
                                                    "state": {
                                                        "description": "State contains the current state of this Order resource. States 'success' and 'expired' are 'final'",
                                                        "enum": [
                                                            "valid",
                                                            "ready",
                                                            "pending",
                                                            "processing",
                                                            "invalid",
                                                            "expired",
                                                            "errored"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "url": {
                                                        "description": "URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.",
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        },
                                        "required": [
                                            "metadata",
                                            "spec"
                                        ],
                                        "type": "object"
                                    }
                                },
                                "served": true,
                                "storage": true,
                                "subresources": {
                                    "status": {}
                                }
                            }
                        ]
                    },
                    "status": {
                        "acceptedNames": {
                            "categories": [
                                "cert-manager",
                                "cert-manager-acme"
                            ],
                            "kind": "Order",
                            "listKind": "OrderList",
                            "plural": "orders",
                            "singular": "order"
                        },
                        "conditions": [
                            {
                                "lastTransitionTime": "2021-11-04T10:31:22Z",
                                "message": "no conflicts found",
                                "reason": "NoConflicts",
                                "status": "True",
                                "type": "NamesAccepted"
                            },
                            {
                                "lastTransitionTime": "2021-11-04T10:31:22Z",
                                "message": "the initial names have been accepted",
                                "reason": "Installing",
                                "status": "False",
                                "type": "Established"
                            }
                        ],
                        "storedVersions": [
                            "v1"
                        ]
                    }
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "spec": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:apiextensions.k8s.io/v1beta1:CustomResourceDefinition::orders.acme.cert-manager.io"
                ]
            },
            {
                "urn": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1:Role::cert-manager/cert-manager-webhook:dynamic-serving",
                "custom": true,
                "id": "cert-manager/cert-manager-webhook:dynamic-serving",
                "type": "kubernetes:rbac.authorization.k8s.io/v1:Role",
                "inputs": {
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "name": "cert-manager-webhook:dynamic-serving",
                        "namespace": "cert-manager"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-webhook-ca"
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "outputs": {
                    "__initialApiVersion": "rbac.authorization.k8s.io/v1",
                    "__inputs": {
                        "apiVersion": "rbac.authorization.k8s.io/v1",
                        "kind": "Role",
                        "metadata": {
                            "labels": {
                                "app": "webhook",
                                "app.kubernetes.io/component": "webhook",
                                "app.kubernetes.io/instance": "cert-manager",
                                "app.kubernetes.io/managed-by": "pulumi",
                                "app.kubernetes.io/name": "webhook",
                                "app.kubernetes.io/version": "v1.6.1"
                            },
                            "name": "cert-manager-webhook:dynamic-serving",
                            "namespace": "cert-manager"
                        },
                        "rules": [
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resourceNames": [
                                    "cert-manager-webhook-ca"
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "get",
                                    "list",
                                    "watch",
                                    "update"
                                ]
                            },
                            {
                                "apiGroups": [
                                    ""
                                ],
                                "resources": [
                                    "secrets"
                                ],
                                "verbs": [
                                    "create"
                                ]
                            }
                        ]
                    },
                    "apiVersion": "rbac.authorization.k8s.io/v1",
                    "kind": "Role",
                    "metadata": {
                        "annotations": {
                            "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"rbac.authorization.k8s.io/v1\",\"kind\":\"Role\",\"metadata\":{\"labels\":{\"app\":\"webhook\",\"app.kubernetes.io/component\":\"webhook\",\"app.kubernetes.io/instance\":\"cert-manager\",\"app.kubernetes.io/managed-by\":\"pulumi\",\"app.kubernetes.io/name\":\"webhook\",\"app.kubernetes.io/version\":\"v1.6.1\"},\"name\":\"cert-manager-webhook:dynamic-serving\",\"namespace\":\"cert-manager\"},\"rules\":[{\"apiGroups\":[\"\"],\"resourceNames\":[\"cert-manager-webhook-ca\"],\"resources\":[\"secrets\"],\"verbs\":[\"get\",\"list\",\"watch\",\"update\"]},{\"apiGroups\":[\"\"],\"resources\":[\"secrets\"],\"verbs\":[\"create\"]}]}\n"
                        },
                        "creationTimestamp": "2021-11-04T10:31:32Z",
                        "labels": {
                            "app": "webhook",
                            "app.kubernetes.io/component": "webhook",
                            "app.kubernetes.io/instance": "cert-manager",
                            "app.kubernetes.io/managed-by": "pulumi",
                            "app.kubernetes.io/name": "webhook",
                            "app.kubernetes.io/version": "v1.6.1"
                        },
                        "managedFields": [
                            {
                                "apiVersion": "rbac.authorization.k8s.io/v1",
                                "fieldsType": "FieldsV1",
                                "fieldsV1": {
                                    "f:metadata": {
                                        "f:annotations": {
                                            ".": {},
                                            "f:kubectl.kubernetes.io/last-applied-configuration": {}
                                        },
                                        "f:labels": {
                                            ".": {},
                                            "f:app": {},
                                            "f:app.kubernetes.io/component": {},
                                            "f:app.kubernetes.io/instance": {},
                                            "f:app.kubernetes.io/managed-by": {},
                                            "f:app.kubernetes.io/name": {},
                                            "f:app.kubernetes.io/version": {}
                                        }
                                    },
                                    "f:rules": {}
                                },
                                "manager": "pulumi-resource-kubernetes",
                                "operation": "Update",
                                "time": "2021-11-04T10:31:32Z"
                            }
                        ],
                        "name": "cert-manager-webhook:dynamic-serving",
                        "namespace": "cert-manager",
                        "resourceVersion": "1196",
                        "uid": "dbccffeb-23ec-468e-8a46-8caf5378a4d2"
                    },
                    "rules": [
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resourceNames": [
                                "cert-manager-webhook-ca"
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "get",
                                "list",
                                "watch",
                                "update"
                            ]
                        },
                        {
                            "apiGroups": [
                                ""
                            ],
                            "resources": [
                                "secrets"
                            ],
                            "verbs": [
                                "create"
                            ]
                        }
                    ]
                },
                "parent": "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile::cert-manager",
                "provider": "urn:pulumi:dev::test-04-foobar-on-eks::eks:index:Cluster$pulumi:providers:kubernetes::cluster-provider::517a7bec-9f32-4d64-bede-6185da1dee41",
                "propertyDependencies": {
                    "apiVersion": null,
                    "kind": null,
                    "metadata": null,
                    "rules": null
                },
                "aliases": [
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1alpha1:Role::cert-manager/cert-manager-webhook:dynamic-serving",
                    "urn:pulumi:dev::test-04-foobar-on-eks::foobar:cert-manager$kubernetes:yaml:ConfigFile$kubernetes:rbac.authorization.k8s.io/v1beta1:Role::cert-manager/cert-manager-webhook:dynamic-serving"
                ]
            }
        ],
        "pending_operations": [
        ]
    }
}
